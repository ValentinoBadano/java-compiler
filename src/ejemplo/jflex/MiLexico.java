// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/ejemplo/jflex/lexico.flex

/* JFlex example: partial Java language lexer specification */
package ejemplo.jflex;

/**
 * This class is a simple example lexer.
 */

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class MiLexico {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int COMMENT_M = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\10\u3000\31\u1f00\1\u0100\1\u3100\1\u3200"+
    "\1\u0100\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u3b00\1\u0100\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u4200\1\u1f00\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00"+
    "\1\u4f00\1\u5000\1\u5100\1\u1f00\3\u0100\1\u5200\1\u5300\1\u5400"+
    "\12\u1f00\4\u0100\1\u5500\17\u1f00\2\u0100\1\u5600\41\u1f00\2\u0100"+
    "\1\u5700\1\u5800\2\u1f00\1\u5900\1\u5a00\27\u0100\1\u5b00\2\u0100"+
    "\1\u5c00\45\u1f00\1\u0100\1\u5d00\1\u5e00\11\u1f00\1\u5f00\24\u1f00"+
    "\1\u6000\1\u6100\1\u1f00\1\u6200\1\u6300\1\u6400\1\u6500\2\u1f00"+
    "\1\u6600\5\u1f00\1\u6700\1\u6800\1\u6900\5\u1f00\1\u6a00\1\u6b00"+
    "\4\u1f00\1\u6c00\2\u1f00\1\u6d00\16\u1f00\246\u0100\1\u6e00\20\u0100"+
    "\1\u6f00\1\u7000\25\u0100\1\u7100\34\u0100\1\u7200\14\u1f00\2\u0100"+
    "\1\u7300\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\6"+
    "\1\7\1\10\1\11\4\0\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\11\23\1\24\1\25"+
    "\1\26\1\27\1\30\2\0\32\31\1\32\1\33\1\34"+
    "\1\0\1\35\1\0\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\31\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\31\1\55\1\56\1\57\1\60"+
    "\1\31\1\61\3\31\1\62\1\0\1\63\7\0\1\3"+
    "\44\0\1\64\12\0\1\64\4\0\1\64\5\0\27\64"+
    "\1\0\37\64\1\0\u01ca\64\4\0\14\64\16\0\5\64"+
    "\7\0\1\64\1\0\1\64\21\0\165\64\1\0\2\64"+
    "\2\0\4\64\1\0\1\64\6\0\1\64\1\0\3\64"+
    "\1\0\1\64\1\0\24\64\1\0\123\64\1\0\213\64"+
    "\1\0\255\64\1\0\46\64\2\0\1\64\6\0\51\64"+
    "\10\0\55\64\1\0\1\64\1\0\2\64\1\0\2\64"+
    "\1\0\1\64\10\0\33\64\4\0\4\64\35\0\13\64"+
    "\5\0\100\64\12\65\4\0\146\64\1\0\10\64\2\0"+
    "\12\64\1\0\6\64\12\65\3\64\2\0\1\64\20\0"+
    "\73\64\2\0\145\64\16\0\12\65\54\64\4\0\1\64"+
    "\2\0\1\64\2\0\56\64\22\0\34\64\4\0\13\64"+
    "\65\0\25\64\1\0\10\64\25\0\17\64\1\0\201\64"+
    "\2\0\12\65\1\0\23\64\1\0\10\64\2\0\2\64"+
    "\2\0\26\64\1\0\7\64\1\0\1\64\3\0\4\64"+
    "\2\0\11\64\2\0\2\64\2\0\4\64\10\0\1\64"+
    "\4\0\2\64\1\0\5\64\2\0\12\65\2\64\12\0"+
    "\1\64\1\0\1\64\2\0\3\64\1\0\6\64\4\0"+
    "\2\64\2\0\26\64\1\0\7\64\1\0\2\64\1\0"+
    "\2\64\1\0\2\64\2\0\1\64\1\0\5\64\4\0"+
    "\2\64\2\0\3\64\3\0\1\64\7\0\4\64\1\0"+
    "\1\64\7\0\12\65\6\64\13\0\3\64\1\0\11\64"+
    "\1\0\3\64\1\0\26\64\1\0\7\64\1\0\2\64"+
    "\1\0\5\64\2\0\12\64\1\0\3\64\1\0\3\64"+
    "\2\0\1\64\17\0\4\64\2\0\12\65\11\0\7\64"+
    "\1\0\3\64\1\0\10\64\2\0\2\64\2\0\26\64"+
    "\1\0\7\64\1\0\2\64\1\0\5\64\2\0\11\64"+
    "\2\0\2\64\2\0\3\64\10\0\2\64\4\0\2\64"+
    "\1\0\5\64\2\0\12\65\1\0\1\64\20\0\2\64"+
    "\1\0\6\64\3\0\3\64\1\0\4\64\3\0\2\64"+
    "\1\0\1\64\1\0\2\64\3\0\2\64\3\0\3\64"+
    "\3\0\14\64\4\0\5\64\3\0\3\64\1\0\4\64"+
    "\2\0\1\64\6\0\1\64\16\0\12\65\20\0\15\64"+
    "\1\0\3\64\1\0\27\64\1\0\20\64\3\0\10\64"+
    "\1\0\3\64\1\0\4\64\7\0\2\64\1\0\3\64"+
    "\5\0\4\64\2\0\12\65\20\0\4\64\1\0\10\64"+
    "\1\0\3\64\1\0\27\64\1\0\12\64\1\0\5\64"+
    "\2\0\11\64\1\0\3\64\1\0\4\64\7\0\2\64"+
    "\7\0\1\64\1\0\4\64\2\0\12\65\1\0\2\64"+
    "\15\0\4\64\1\0\10\64\1\0\3\64\1\0\63\64"+
    "\1\0\3\64\1\0\5\64\5\0\4\64\7\0\5\64"+
    "\2\0\12\65\12\0\6\64\2\0\2\64\1\0\22\64"+
    "\3\0\30\64\1\0\11\64\1\0\1\64\2\0\7\64"+
    "\3\0\1\64\4\0\6\64\1\0\1\64\1\0\10\64"+
    "\6\0\12\65\2\0\2\64\15\0\72\64\5\0\17\64"+
    "\1\0\12\65\47\0\2\64\1\0\1\64\1\0\5\64"+
    "\1\0\30\64\1\0\1\64\1\0\27\64\2\0\5\64"+
    "\1\0\1\64\1\0\6\64\2\0\12\65\2\0\4\64"+
    "\40\0\1\64\27\0\2\64\6\0\12\65\13\0\1\64"+
    "\1\0\1\64\1\0\1\64\4\0\12\64\1\0\44\64"+
    "\4\0\24\64\1\0\22\64\1\0\44\64\11\0\1\64"+
    "\71\0\100\64\12\65\6\0\100\64\12\65\4\64\2\0"+
    "\46\64\1\0\1\64\5\0\1\64\2\0\53\64\1\0"+
    "\115\64\1\0\4\64\2\0\7\64\1\0\1\64\1\0"+
    "\4\64\2\0\51\64\1\0\4\64\2\0\41\64\1\0"+
    "\4\64\2\0\7\64\1\0\1\64\1\0\4\64\2\0"+
    "\17\64\1\0\71\64\1\0\4\64\2\0\103\64\2\0"+
    "\3\64\40\0\20\64\20\0\126\64\2\0\6\64\3\0"+
    "\u016c\64\2\0\21\64\1\0\32\64\5\0\113\64\3\0"+
    "\13\64\7\0\15\64\1\0\7\64\13\0\25\64\13\0"+
    "\24\64\14\0\15\64\1\0\3\64\1\0\2\64\14\0"+
    "\124\64\3\0\1\64\4\0\2\64\2\0\12\65\41\0"+
    "\3\64\2\0\12\65\6\0\131\64\7\0\53\64\5\0"+
    "\106\64\12\0\37\64\1\0\14\64\4\0\14\64\12\0"+
    "\12\65\36\64\2\0\5\64\13\0\54\64\4\0\32\64"+
    "\6\0\12\65\46\0\34\64\4\0\77\64\1\0\35\64"+
    "\2\0\1\64\12\65\6\0\12\65\15\0\1\64\10\0"+
    "\17\64\101\0\114\64\4\0\12\65\21\0\11\64\14\0"+
    "\60\64\12\65\72\64\14\0\70\64\10\0\12\65\3\0"+
    "\3\64\12\65\44\64\2\0\11\64\7\0\53\64\2\0"+
    "\3\64\20\0\3\64\1\0\47\64\5\0\372\64\1\0"+
    "\33\64\2\0\6\64\2\0\46\64\2\0\6\64\2\0"+
    "\10\64\1\0\1\64\1\0\1\64\1\0\1\64\1\0"+
    "\37\64\2\0\65\64\1\0\7\64\1\0\1\64\3\0"+
    "\3\64\1\0\7\64\3\0\4\64\2\0\6\64\4\0"+
    "\15\64\5\0\3\64\1\0\7\64\53\0\2\3\25\0"+
    "\2\64\23\0\1\64\34\0\1\64\15\0\1\64\20\0"+
    "\15\64\63\0\41\64\21\0\1\64\4\0\1\64\2\0"+
    "\12\64\1\0\1\64\3\0\5\64\6\0\1\64\1\0"+
    "\1\64\1\0\1\64\1\0\4\64\1\0\13\64\2\0"+
    "\4\64\5\0\5\64\4\0\1\64\21\0\51\64\u022d\0"+
    "\64\64\26\0\57\64\1\0\57\64\1\0\205\64\6\0"+
    "\11\64\14\0\46\64\1\0\1\64\5\0\1\64\2\0"+
    "\70\64\7\0\1\64\17\0\30\64\11\0\7\64\1\0"+
    "\7\64\1\0\7\64\1\0\7\64\1\0\7\64\1\0"+
    "\7\64\1\0\7\64\1\0\7\64\1\0\40\64\57\0"+
    "\1\64\325\0\3\64\31\0\17\64\1\0\5\64\2\0"+
    "\5\64\4\0\126\64\2\0\2\64\2\0\3\64\1\0"+
    "\132\64\1\0\4\64\5\0\53\64\1\0\136\64\21\0"+
    "\33\64\65\0\306\64\112\0\360\64\20\0\215\64\103\0"+
    "\56\64\2\0\15\64\3\0\20\64\12\65\2\64\24\0"+
    "\63\64\1\0\12\64\1\0\163\64\45\0\11\64\2\0"+
    "\147\64\2\0\65\64\2\0\5\64\60\0\61\64\30\0"+
    "\64\64\14\0\106\64\12\0\12\65\6\0\30\64\3\0"+
    "\1\64\1\0\3\64\12\65\44\64\2\0\44\64\14\0"+
    "\35\64\3\0\101\64\16\0\1\64\12\65\6\0\20\64"+
    "\12\65\5\64\1\0\67\64\11\0\16\64\2\0\12\65"+
    "\6\0\27\64\3\0\111\64\30\0\3\64\2\0\20\64"+
    "\2\0\5\64\12\0\6\64\2\0\6\64\2\0\6\64"+
    "\11\0\7\64\1\0\7\64\1\0\53\64\1\0\14\64"+
    "\10\0\173\64\1\0\2\64\2\0\12\65\6\0\244\64"+
    "\14\0\27\64\4\0\61\64\4\0\u0100\3\156\64\2\0"+
    "\152\64\46\0\7\64\14\0\5\64\5\0\14\64\1\0"+
    "\15\64\1\0\5\64\1\0\1\64\1\0\2\64\1\0"+
    "\2\64\1\0\154\64\41\0\153\64\22\0\100\64\2\0"+
    "\66\64\50\0\14\64\4\0\20\64\20\0\20\64\3\0"+
    "\2\64\30\0\3\64\40\0\5\64\1\0\207\64\23\0"+
    "\12\65\7\0\32\64\4\0\1\64\1\0\32\64\13\0"+
    "\131\64\3\0\6\64\2\0\6\64\2\0\6\64\2\0"+
    "\3\64\43\0\14\64\1\0\32\64\1\0\23\64\1\0"+
    "\2\64\1\0\17\64\2\0\16\64\42\0\173\64\105\0"+
    "\65\64\210\0\1\64\202\0\35\64\3\0\61\64\17\0"+
    "\1\64\37\0\40\64\15\0\36\64\5\0\53\64\5\0"+
    "\36\64\2\0\44\64\4\0\10\64\1\0\5\64\52\0"+
    "\236\64\2\0\12\65\6\0\44\64\4\0\44\64\4\0"+
    "\50\64\10\0\64\64\234\0\67\64\11\0\26\64\12\0"+
    "\10\64\230\0\6\64\2\0\1\64\1\0\54\64\1\0"+
    "\2\64\3\0\1\64\2\0\27\64\12\0\27\64\11\0"+
    "\37\64\101\0\23\64\1\0\2\64\12\0\26\64\12\0"+
    "\32\64\106\0\70\64\6\0\2\64\100\0\4\64\1\0"+
    "\2\64\5\0\10\64\1\0\3\64\1\0\35\64\2\0"+
    "\3\64\4\0\1\64\40\0\35\64\3\0\35\64\43\0"+
    "\10\64\1\0\36\64\31\0\66\64\12\0\26\64\12\0"+
    "\23\64\15\0\22\64\156\0\111\64\67\0\63\64\15\0"+
    "\63\64\15\0\50\64\10\0\12\65\306\0\35\64\12\0"+
    "\1\64\10\0\41\64\217\0\27\64\11\0\107\64\37\0"+
    "\12\65\17\0\74\64\25\0\31\64\7\0\12\65\6\0"+
    "\65\64\1\0\12\65\4\0\3\64\11\0\44\64\2\0"+
    "\1\64\11\0\105\64\4\0\4\64\3\0\12\65\1\64"+
    "\1\0\1\64\43\0\22\64\1\0\45\64\6\0\1\64"+
    "\101\0\7\64\1\0\1\64\1\0\4\64\1\0\17\64"+
    "\1\0\12\64\7\0\73\64\5\0\12\65\6\0\4\64"+
    "\1\0\10\64\2\0\2\64\2\0\26\64\1\0\7\64"+
    "\1\0\2\64\1\0\5\64\1\0\12\64\2\0\2\64"+
    "\2\0\3\64\2\0\1\64\6\0\1\64\5\0\7\64"+
    "\2\0\7\64\3\0\5\64\213\0\113\64\5\0\12\65"+
    "\4\0\2\64\40\0\106\64\1\0\1\64\10\0\12\65"+
    "\246\0\66\64\2\0\11\64\27\0\6\64\42\0\101\64"+
    "\3\0\1\64\13\0\12\65\46\0\71\64\7\0\12\65"+
    "\66\0\33\64\2\0\17\64\4\0\12\65\306\0\73\64"+
    "\145\0\100\64\12\65\25\0\1\64\240\0\10\64\2\0"+
    "\56\64\2\0\10\64\1\0\2\64\33\0\77\64\10\0"+
    "\1\64\10\0\112\64\3\0\1\64\42\0\71\64\7\0"+
    "\11\64\1\0\55\64\1\0\11\64\17\0\12\65\30\0"+
    "\36\64\2\0\26\64\1\0\16\64\111\0\7\64\1\0"+
    "\2\64\1\0\54\64\3\0\1\64\1\0\2\64\1\0"+
    "\11\64\10\0\12\65\6\0\6\64\1\0\2\64\1\0"+
    "\45\64\1\0\2\64\1\0\6\64\7\0\12\65\u0136\0"+
    "\27\64\11\0\232\64\146\0\157\64\21\0\304\64\274\0"+
    "\57\64\321\0\107\64\271\0\71\64\7\0\37\64\1\0"+
    "\12\65\146\0\36\64\2\0\5\64\13\0\67\64\11\0"+
    "\4\64\14\0\12\65\11\0\25\64\5\0\23\64\260\0"+
    "\100\64\200\0\113\64\4\0\71\64\7\0\21\64\100\0"+
    "\2\64\1\0\1\64\34\0\370\64\10\0\363\64\15\0"+
    "\37\64\61\0\3\64\21\0\4\64\10\0\u018c\64\4\0"+
    "\153\64\5\0\15\64\3\0\11\64\7\0\12\64\3\0"+
    "\2\64\306\0\5\64\3\0\6\64\10\0\10\64\2\0"+
    "\7\64\36\0\4\64\224\0\3\64\273\0\125\64\1\0"+
    "\107\64\1\0\2\64\2\0\1\64\2\0\2\64\2\0"+
    "\4\64\1\0\14\64\1\0\1\64\1\0\7\64\1\0"+
    "\101\64\1\0\4\64\2\0\10\64\1\0\7\64\1\0"+
    "\34\64\1\0\4\64\1\0\5\64\1\0\1\64\3\0"+
    "\7\64\1\0\u0154\64\2\0\31\64\1\0\31\64\1\0"+
    "\37\64\1\0\31\64\1\0\37\64\1\0\31\64\1\0"+
    "\37\64\1\0\31\64\1\0\37\64\1\0\31\64\1\0"+
    "\10\64\2\0\62\65\67\64\4\0\62\64\10\0\1\64"+
    "\16\0\1\64\26\0\5\64\1\0\17\64\120\0\7\64"+
    "\1\0\21\64\2\0\7\64\1\0\2\64\1\0\5\64"+
    "\325\0\55\64\3\0\16\64\2\0\12\65\4\0\1\64"+
    "\u0171\0\60\64\12\65\6\0\305\64\13\0\7\64\51\0"+
    "\114\64\4\0\12\65\246\0\4\64\1\0\33\64\1\0"+
    "\2\64\1\0\1\64\2\0\1\64\1\0\12\64\1\0"+
    "\4\64\1\0\1\64\1\0\1\64\6\0\1\64\4\0"+
    "\1\64\1\0\1\64\1\0\1\64\1\0\3\64\1\0"+
    "\2\64\1\0\1\64\2\0\1\64\1\0\1\64\1\0"+
    "\1\64\1\0\1\64\1\0\1\64\1\0\2\64\1\0"+
    "\1\64\2\0\4\64\1\0\7\64\1\0\4\64\1\0"+
    "\4\64\1\0\1\64\1\0\12\64\1\0\21\64\5\0"+
    "\3\64\1\0\5\64\1\0\21\64\164\0\32\64\6\0"+
    "\32\64\6\0\32\64\166\0\327\64\51\0\65\64\13\0"+
    "\336\64\2\0\u0182\64\16\0\u0131\64\37\0\36\64\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29696];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\1\1\3\1\1\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\2\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\16\22"+
    "\1\25\1\26\1\14\1\27\1\30\1\31\1\27\1\30"+
    "\2\1\1\32\1\2\1\33\4\0\1\34\1\0\1\12"+
    "\1\35\1\36\1\37\1\40\14\22\1\41\6\22\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\3\0\1\50\6\22"+
    "\1\51\4\22\1\52\7\22\3\0\5\22\1\53\7\22"+
    "\1\54\1\55\1\56\2\22\1\57\2\0\1\22\1\60"+
    "\2\22\1\61\2\22\1\62\5\22\1\63\10\22\1\64"+
    "\1\65\1\66\10\22\1\67\1\22\1\70\1\0\7\22"+
    "\1\0\1\22\1\0\6\22\1\71\1\0\1\22\1\0"+
    "\3\22\1\72\2\22\1\0\1\22\1\0\1\22\1\0"+
    "\1\22\1\0\1\22\1\73\1\74\1\0\1\22\1\0"+
    "\1\22\1\0\1\22\1\0\1\22\1\0\1\22\1\0"+
    "\1\22\1\0\1\22\1\0\1\22\1\0\1\22\1\0"+
    "\1\22\1\0\1\22\1\0\1\22\1\0\1\22\2\75"+
    "\1\0\1\22\1\0\1\22\2\76\1\0\1\22\1\0"+
    "\1\22\1\0\1\22\1\0\1\22\2\77\2\100";

  private static int [] zzUnpackAction() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\242\0\330\0\u010e\0\242"+
    "\0\u0144\0\u017a\0\242\0\u01b0\0\242\0\242\0\242\0\u01e6"+
    "\0\242\0\u021c\0\u0252\0\u0288\0\242\0\u02be\0\u02f4\0\u032a"+
    "\0\u0360\0\242\0\242\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e"+
    "\0\u04a4\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2\0\u05e8\0\u061e"+
    "\0\u0654\0\242\0\242\0\u068a\0\242\0\242\0\242\0\u06c0"+
    "\0\u06f6\0\u072c\0\u0762\0\242\0\u0144\0\242\0\u0798\0\u07ce"+
    "\0\u0804\0\u083a\0\242\0\u01e6\0\u0870\0\242\0\242\0\242"+
    "\0\242\0\u08a6\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4\0\u09ea"+
    "\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8\0\u0360\0\u0b2e\0\u0b64"+
    "\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c\0\242\0\242\0\242\0\242"+
    "\0\242\0\242\0\u0c72\0\u0ca8\0\u0cde\0\u0360\0\u0d14\0\u0d4a"+
    "\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa"+
    "\0\u0f30\0\u0360\0\u0f66\0\u0f9c\0\u0fd2\0\u1008\0\u103e\0\u1074"+
    "\0\u10aa\0\u10e0\0\u1116\0\u114c\0\u1182\0\u11b8\0\u11ee\0\u1224"+
    "\0\u125a\0\u0360\0\u1290\0\u12c6\0\u12fc\0\u1332\0\u1368\0\u139e"+
    "\0\u13d4\0\u0360\0\u0360\0\u0360\0\u140a\0\u1440\0\242\0\u1476"+
    "\0\u14ac\0\u14e2\0\u0360\0\u1518\0\u154e\0\u0360\0\u1584\0\u15ba"+
    "\0\u0360\0\u15f0\0\u1626\0\u165c\0\u1692\0\u16c8\0\u0360\0\u16fe"+
    "\0\u1734\0\u176a\0\u17a0\0\u17d6\0\u180c\0\u1842\0\u1878\0\u0360"+
    "\0\u0360\0\u0360\0\u18ae\0\u18e4\0\u191a\0\u1950\0\u1986\0\u19bc"+
    "\0\u19f2\0\u1a28\0\u0360\0\u1a5e\0\u0360\0\u1a94\0\u1aca\0\u1b00"+
    "\0\u1b36\0\u1b6c\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a\0\u1cb0"+
    "\0\u1ce6\0\u1d1c\0\u1d52\0\u1d88\0\u1dbe\0\u1df4\0\u0360\0\u1e2a"+
    "\0\u1e60\0\u1e96\0\u1ecc\0\u1f02\0\u1f38\0\u0360\0\u1f6e\0\u1fa4"+
    "\0\u1fda\0\u2010\0\u2046\0\u207c\0\u20b2\0\u20e8\0\u211e\0\u2154"+
    "\0\u0360\0\u0360\0\u218a\0\u21c0\0\u21f6\0\u222c\0\u2262\0\u2298"+
    "\0\u22ce\0\u2304\0\u233a\0\u2370\0\u23a6\0\u23dc\0\u2412\0\u2448"+
    "\0\u247e\0\u24b4\0\u24ea\0\u2520\0\u2556\0\u258c\0\u25c2\0\u25f8"+
    "\0\u262e\0\u2664\0\u269a\0\u26d0\0\242\0\u0360\0\u2706\0\u273c"+
    "\0\u2772\0\u27a8\0\242\0\u0360\0\u27de\0\u2814\0\u284a\0\u2880"+
    "\0\u28b6\0\u28ec\0\u2922\0\u2958\0\242\0\u0360\0\242\0\u0360";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\4\1\5\1\6\1\5\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\4\1\33\1\4\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\2\31\1\42\3\31\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\31\1\52\1\53"+
    "\1\4\1\54\2\55\4\56\2\55\1\57\22\55\1\60"+
    "\32\55\1\4\2\56\1\4\1\56\1\61\1\56\3\4"+
    "\1\62\1\4\1\63\51\4\70\0\1\5\112\0\1\64"+
    "\36\0\2\65\4\0\60\65\14\0\1\66\2\0\1\67"+
    "\1\70\1\0\1\71\1\72\55\0\1\73\74\0\2\20"+
    "\41\0\1\20\6\0\1\74\11\0\1\75\1\0\2\54"+
    "\41\0\1\54\20\0\1\20\1\0\1\54\1\23\41\0"+
    "\1\54\27\0\1\76\65\0\1\77\65\0\1\100\65\0"+
    "\1\101\60\0\2\31\5\0\1\31\3\0\25\31\2\0"+
    "\2\31\22\0\2\31\5\0\1\31\3\0\15\31\1\102"+
    "\7\31\2\0\2\31\22\0\2\31\5\0\1\31\3\0"+
    "\16\31\1\103\1\31\1\104\4\31\2\0\2\31\22\0"+
    "\2\31\5\0\1\31\3\0\16\31\1\105\6\31\2\0"+
    "\2\31\22\0\2\31\5\0\1\31\3\0\5\31\1\106"+
    "\15\31\1\107\1\31\2\0\2\31\22\0\2\31\5\0"+
    "\1\31\3\0\13\31\1\110\1\31\1\111\7\31\2\0"+
    "\2\31\22\0\2\31\5\0\1\31\3\0\1\31\1\112"+
    "\11\31\1\113\11\31\2\0\2\31\22\0\2\31\5\0"+
    "\1\31\3\0\15\31\1\114\7\31\2\0\2\31\22\0"+
    "\2\31\5\0\1\31\3\0\16\31\1\115\6\31\2\0"+
    "\2\31\22\0\2\31\5\0\1\31\3\0\20\31\1\116"+
    "\4\31\2\0\2\31\22\0\2\31\5\0\1\31\3\0"+
    "\20\31\1\117\4\31\2\0\2\31\22\0\2\31\5\0"+
    "\1\31\3\0\5\31\1\120\17\31\2\0\2\31\22\0"+
    "\2\31\5\0\1\31\3\0\10\31\1\121\14\31\2\0"+
    "\2\31\22\0\2\31\5\0\1\31\3\0\10\31\1\122"+
    "\7\31\1\123\4\31\2\0\2\31\22\0\2\31\5\0"+
    "\1\31\3\0\15\31\1\124\7\31\2\0\2\31\22\0"+
    "\2\54\41\0\1\54\10\0\1\125\22\0\1\126\16\0"+
    "\1\127\4\0\1\130\10\0\1\56\77\0\1\131\64\0"+
    "\1\132\71\0\1\67\1\70\1\0\1\71\1\72\60\0"+
    "\1\133\3\0\2\70\41\0\1\70\6\0\1\134\11\0"+
    "\1\135\65\0\1\70\2\0\1\72\65\0\1\75\64\0"+
    "\2\31\5\0\1\31\3\0\4\31\1\136\20\31\2\0"+
    "\2\31\22\0\2\31\5\0\1\31\3\0\16\31\1\137"+
    "\6\31\2\0\2\31\22\0\2\31\5\0\1\31\3\0"+
    "\5\31\1\140\17\31\2\0\2\31\22\0\2\31\5\0"+
    "\1\31\3\0\15\31\1\141\7\31\2\0\2\31\22\0"+
    "\2\31\5\0\1\31\3\0\3\31\1\142\21\31\2\0"+
    "\2\31\22\0\2\31\5\0\1\31\3\0\17\31\1\143"+
    "\5\31\2\0\2\31\22\0\2\31\5\0\1\31\3\0"+
    "\21\31\1\144\3\31\2\0\2\31\22\0\2\31\5\0"+
    "\1\31\3\0\4\31\1\145\20\31\2\0\2\31\22\0"+
    "\2\31\5\0\1\31\3\0\13\31\1\146\11\31\2\0"+
    "\2\31\22\0\2\31\5\0\1\31\3\0\16\31\1\147"+
    "\6\31\2\0\2\31\22\0\2\31\5\0\1\31\3\0"+
    "\17\31\1\150\2\31\1\151\2\31\2\0\2\31\22\0"+
    "\2\31\5\0\1\31\3\0\22\31\1\152\2\31\2\0"+
    "\2\31\22\0\2\31\5\0\1\31\3\0\16\31\1\153"+
    "\6\31\2\0\2\31\22\0\2\31\5\0\1\31\3\0"+
    "\17\31\1\154\5\31\2\0\2\31\22\0\2\31\5\0"+
    "\1\31\3\0\16\31\1\155\6\31\2\0\2\31\22\0"+
    "\2\31\5\0\1\31\3\0\5\31\1\156\17\31\2\0"+
    "\2\31\22\0\2\31\5\0\1\31\3\0\23\31\1\157"+
    "\1\31\2\0\2\31\22\0\2\31\5\0\1\31\3\0"+
    "\13\31\1\160\6\31\1\161\2\31\2\0\2\31\17\0"+
    "\1\133\1\162\1\0\1\163\1\164\64\0\2\70\41\0"+
    "\1\70\16\0\1\133\4\0\1\135\64\0\2\31\5\0"+
    "\1\31\3\0\13\31\1\165\11\31\2\0\2\31\22\0"+
    "\2\31\5\0\1\31\3\0\1\31\1\166\23\31\2\0"+
    "\2\31\22\0\2\31\5\0\1\31\3\0\22\31\1\167"+
    "\2\31\2\0\2\31\22\0\2\31\5\0\1\31\3\0"+
    "\13\31\1\170\11\31\2\0\2\31\22\0\2\31\5\0"+
    "\1\31\3\0\13\31\1\171\11\31\2\0\2\31\22\0"+
    "\2\31\5\0\1\31\3\0\5\31\1\172\17\31\2\0"+
    "\2\31\22\0\2\31\5\0\1\31\3\0\4\31\1\173"+
    "\12\31\1\174\5\31\2\0\2\31\22\0\2\31\5\0"+
    "\1\31\3\0\21\31\1\157\3\31\2\0\2\31\22\0"+
    "\2\31\5\0\1\31\3\0\1\31\1\175\23\31\2\0"+
    "\2\31\22\0\2\31\5\0\1\31\3\0\23\31\1\176"+
    "\1\31\2\0\2\31\22\0\2\31\5\0\1\31\3\0"+
    "\5\31\1\177\17\31\2\0\2\31\22\0\2\31\5\0"+
    "\1\31\3\0\7\31\1\200\15\31\2\0\2\31\22\0"+
    "\2\31\5\0\1\31\3\0\5\31\1\201\17\31\2\0"+
    "\2\31\22\0\2\31\5\0\1\31\3\0\24\31\1\202"+
    "\2\0\2\31\22\0\2\31\5\0\1\31\3\0\15\31"+
    "\1\203\7\31\2\0\2\31\22\0\2\31\5\0\1\31"+
    "\3\0\5\31\1\204\17\31\2\0\2\31\22\0\2\31"+
    "\5\0\1\31\3\0\5\31\1\205\17\31\2\0\2\31"+
    "\22\0\2\31\5\0\1\31\3\0\11\31\1\206\13\31"+
    "\2\0\2\31\13\0\1\207\6\0\2\162\41\0\1\162"+
    "\6\0\1\210\11\0\1\211\65\0\1\162\2\0\1\164"+
    "\64\0\2\31\5\0\1\31\3\0\5\31\1\212\17\31"+
    "\2\0\2\31\22\0\2\31\5\0\1\31\3\0\12\31"+
    "\1\213\12\31\2\0\2\31\22\0\2\31\5\0\1\31"+
    "\3\0\11\31\1\214\13\31\2\0\2\31\22\0\2\31"+
    "\5\0\1\31\3\0\1\31\1\215\23\31\2\0\2\31"+
    "\22\0\2\31\5\0\1\31\3\0\5\31\1\216\17\31"+
    "\2\0\2\31\22\0\2\31\5\0\1\31\3\0\5\31"+
    "\1\217\17\31\2\0\2\31\22\0\2\31\5\0\1\31"+
    "\3\0\20\31\1\220\4\31\2\0\2\31\22\0\2\31"+
    "\5\0\1\31\3\0\22\31\1\221\2\31\2\0\2\31"+
    "\22\0\2\31\5\0\1\31\3\0\22\31\1\222\2\31"+
    "\2\0\2\31\22\0\2\31\5\0\1\31\3\0\7\31"+
    "\1\223\15\31\2\0\2\31\22\0\2\31\5\0\1\31"+
    "\3\0\20\31\1\224\4\31\2\0\2\31\22\0\2\31"+
    "\5\0\1\31\3\0\1\31\1\225\23\31\2\0\2\31"+
    "\22\0\2\31\5\0\1\31\3\0\21\31\1\226\3\31"+
    "\2\0\2\31\22\0\2\31\5\0\1\31\3\0\13\31"+
    "\1\227\11\31\2\0\2\31\22\0\2\162\41\0\1\162"+
    "\13\0\1\207\7\0\1\211\64\0\2\31\5\0\1\31"+
    "\3\0\1\31\1\230\23\31\2\0\2\31\22\0\2\31"+
    "\5\0\1\31\3\0\15\31\1\231\7\31\2\0\2\31"+
    "\22\0\2\31\5\0\1\31\3\0\20\31\1\232\4\31"+
    "\2\0\2\31\22\0\2\31\5\0\1\31\3\0\3\31"+
    "\1\233\21\31\2\0\2\31\22\0\2\31\5\0\1\31"+
    "\3\0\16\31\1\234\6\31\2\0\2\31\22\0\2\31"+
    "\5\0\1\31\3\0\1\235\24\31\2\0\2\31\22\0"+
    "\2\31\5\0\1\31\3\0\5\31\1\236\17\31\2\0"+
    "\2\31\22\0\2\31\5\0\1\31\3\0\1\31\1\237"+
    "\23\31\2\0\2\31\22\0\2\31\5\0\1\31\3\0"+
    "\22\31\1\240\2\31\2\0\2\31\22\0\2\31\5\0"+
    "\1\31\3\0\21\31\1\241\3\31\2\0\2\31\22\0"+
    "\2\31\5\0\1\31\3\0\15\31\1\242\7\31\2\0"+
    "\2\31\22\0\2\31\5\0\1\31\3\0\23\31\1\243"+
    "\1\31\2\0\2\31\22\0\2\31\5\0\1\31\3\0"+
    "\5\31\1\244\17\31\2\0\2\31\22\0\2\31\5\0"+
    "\1\31\3\0\13\31\1\245\11\31\2\0\2\31\22\0"+
    "\2\31\5\0\1\31\3\0\7\31\1\246\15\31\2\0"+
    "\2\31\22\0\2\31\5\0\1\31\3\0\2\31\1\247"+
    "\1\31\1\250\1\31\1\251\2\31\1\252\13\31\2\0"+
    "\2\31\22\0\2\31\5\0\1\31\3\0\20\31\1\253"+
    "\4\31\2\0\2\31\22\0\2\31\5\0\1\31\3\0"+
    "\14\31\1\254\10\31\2\0\2\31\22\0\2\31\5\0"+
    "\1\31\3\0\5\31\1\255\17\31\2\0\2\31\2\256"+
    "\4\0\14\256\2\257\5\256\1\257\3\256\25\257\2\256"+
    "\2\257\22\0\2\31\5\0\1\31\3\0\1\31\1\260"+
    "\23\31\2\0\2\31\22\0\2\31\5\0\1\31\3\0"+
    "\20\31\1\261\4\31\2\0\2\31\22\0\2\31\5\0"+
    "\1\31\3\0\16\31\1\262\6\31\2\0\2\31\22\0"+
    "\2\31\5\0\1\31\3\0\23\31\1\263\1\31\2\0"+
    "\2\31\22\0\2\31\5\0\1\31\3\0\13\31\1\264"+
    "\11\31\2\0\2\31\22\0\2\31\5\0\1\31\3\0"+
    "\15\31\1\265\7\31\2\0\2\31\2\266\4\0\14\266"+
    "\2\267\5\266\1\267\3\266\25\267\2\266\2\267\56\0"+
    "\1\270\31\0\2\31\5\0\1\31\3\0\21\31\1\271"+
    "\3\31\2\0\2\31\22\0\2\31\5\0\1\31\3\0"+
    "\20\31\1\272\4\31\2\0\2\31\22\0\2\31\5\0"+
    "\1\31\3\0\1\31\1\273\23\31\2\0\2\31\22\0"+
    "\2\31\5\0\1\31\3\0\16\31\1\274\6\31\2\0"+
    "\2\31\22\0\2\31\5\0\1\31\3\0\17\31\1\275"+
    "\5\31\2\0\2\31\22\0\2\31\5\0\1\31\3\0"+
    "\16\31\1\276\6\31\2\0\2\31\22\0\2\31\5\0"+
    "\1\31\3\0\22\31\1\277\2\31\2\0\2\31\56\0"+
    "\1\300\31\0\2\31\5\0\1\31\3\0\21\31\1\301"+
    "\3\31\2\0\2\31\42\0\1\302\45\0\2\31\5\0"+
    "\1\31\3\0\5\31\1\303\17\31\2\0\2\31\22\0"+
    "\2\31\5\0\1\31\3\0\5\31\1\304\17\31\2\0"+
    "\2\31\22\0\2\31\5\0\1\31\3\0\14\31\1\305"+
    "\10\31\2\0\2\31\22\0\2\31\5\0\1\31\3\0"+
    "\13\31\1\306\11\31\2\0\2\31\22\0\2\31\5\0"+
    "\1\31\3\0\13\31\1\307\11\31\2\0\2\31\22\0"+
    "\2\31\5\0\1\31\3\0\1\31\1\310\23\31\2\0"+
    "\2\31\42\0\1\311\45\0\2\31\5\0\1\31\3\0"+
    "\5\31\1\312\17\31\2\0\2\31\40\0\1\313\47\0"+
    "\2\31\5\0\1\31\3\0\3\31\1\314\21\31\2\0"+
    "\2\31\2\315\4\0\14\315\2\316\5\315\1\316\3\315"+
    "\25\316\2\315\2\316\2\317\4\0\14\317\2\320\5\317"+
    "\1\320\3\317\25\320\2\317\2\320\22\0\2\31\5\0"+
    "\1\31\3\0\5\31\1\321\17\31\2\0\2\31\22\0"+
    "\2\31\5\0\1\31\3\0\22\31\1\322\2\31\2\0"+
    "\2\31\40\0\1\323\47\0\2\31\5\0\1\31\3\0"+
    "\3\31\1\324\21\31\2\0\2\31\57\0\1\325\30\0"+
    "\2\31\5\0\1\31\3\0\22\31\1\326\2\31\2\0"+
    "\2\31\56\0\1\327\31\0\2\31\5\0\1\31\3\0"+
    "\21\31\1\330\3\31\2\0\2\31\56\0\1\331\31\0"+
    "\2\31\5\0\1\31\3\0\21\31\1\332\3\31\2\0"+
    "\2\31\57\0\1\333\30\0\2\31\5\0\1\31\3\0"+
    "\22\31\1\334\2\31\2\0\2\31\46\0\1\335\41\0"+
    "\2\31\5\0\1\31\3\0\11\31\1\336\13\31\2\0"+
    "\2\31\42\0\1\337\45\0\2\31\5\0\1\31\3\0"+
    "\5\31\1\340\17\31\2\0\2\31\42\0\1\341\45\0"+
    "\2\31\5\0\1\31\3\0\5\31\1\342\17\31\2\0"+
    "\2\31\46\0\1\343\41\0\2\31\5\0\1\31\3\0"+
    "\11\31\1\344\13\31\2\0\2\31\53\0\1\345\34\0"+
    "\2\31\5\0\1\31\3\0\16\31\1\346\6\31\2\0"+
    "\2\31\40\0\1\347\47\0\2\31\5\0\1\31\3\0"+
    "\3\31\1\350\21\31\2\0\2\31\40\0\1\351\47\0"+
    "\2\31\5\0\1\31\3\0\3\31\1\352\21\31\2\0"+
    "\2\31\53\0\1\353\34\0\2\31\5\0\1\31\3\0"+
    "\16\31\1\354\6\31\2\0\2\31\52\0\1\355\35\0"+
    "\2\31\5\0\1\31\3\0\15\31\1\356\7\31\2\0"+
    "\2\31\57\0\1\357\30\0\2\31\5\0\1\31\3\0"+
    "\22\31\1\360\2\31\2\0\2\31\57\0\1\361\30\0"+
    "\2\31\5\0\1\31\3\0\22\31\1\362\2\31\2\0"+
    "\2\31\52\0\1\363\35\0\2\31\5\0\1\31\3\0"+
    "\15\31\1\364\7\31\2\0\2\31\46\0\1\365\41\0"+
    "\2\31\5\0\1\31\3\0\11\31\1\366\13\31\2\0"+
    "\2\31\46\0\1\367\41\0\2\31\5\0\1\31\3\0"+
    "\11\31\1\370\13\31\2\0\2\31\53\0\1\371\34\0"+
    "\2\31\5\0\1\31\3\0\16\31\1\372\6\31\2\0"+
    "\2\31\53\0\1\373\34\0\2\31\5\0\1\31\3\0"+
    "\16\31\1\374\6\31\2\0\2\31\52\0\1\375\35\0"+
    "\2\31\5\0\1\31\3\0\15\31\1\376\7\31\2\0"+
    "\2\31\52\0\1\377\35\0\2\31\5\0\1\31\3\0"+
    "\15\31\1\u0100\7\31\2\0\2\31";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10638];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\2\1\1\11\2\1\1\11\1\1\3\11"+
    "\1\1\1\11\3\1\1\11\4\1\2\11\16\1\2\11"+
    "\1\1\3\11\4\1\1\11\1\1\1\11\4\0\1\11"+
    "\1\0\1\1\4\11\23\1\6\11\3\0\24\1\3\0"+
    "\22\1\1\11\2\0\44\1\1\0\7\1\1\0\1\1"+
    "\1\0\7\1\1\0\1\1\1\0\6\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\3\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\11\1\1\1\0\1\1\1\0\1\1\1\11\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\11\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    /*************************************************************************
    * En esta sección se puede incluir código que se copiará textualmente
    * como parte de la definición de la clase del analizador léxico.
    * Típicamente serán variables de instancia o nuevos métodos de la clase.
    *************************************************************************/

    int string_yyline = 0;
    int string_yycolumn = 0;
    int comment_cont =0;

    StringBuffer string = new StringBuffer();

    private MiToken token(String nombre) {
        return new MiToken(nombre, this.yyline, this.yycolumn);
    }

    private MiToken token(String nombre, Object valor) {
        return new MiToken(nombre, this.yyline, this.yycolumn, valor);
    }

    private MiToken token(String nombre, int line, int column, Object valor) {
        return new MiToken(nombre, line, column, valor);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MiLexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public MiToken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new Error("Caracter no permitido: <" + yytext() + ">");
            }
            // fall through
          case 65: break;
          case 2:
            { /* ignore */
            }
            // fall through
          case 66: break;
          case 3:
            { yybegin(STRING);
            }
            // fall through
          case 67: break;
          case 4:
            { return token("P_ABRE", yytext());
            }
            // fall through
          case 68: break;
          case 5:
            { return token("P_CIERRA", yytext());
            }
            // fall through
          case 69: break;
          case 6:
            { return token("MULTIPLICACION", yytext());
            }
            // fall through
          case 70: break;
          case 7:
            { return token("MAS", yytext());
            }
            // fall through
          case 71: break;
          case 8:
            { return token("COMA", yytext());
            }
            // fall through
          case 72: break;
          case 9:
            { return token("MENOS", yytext());
            }
            // fall through
          case 73: break;
          case 10:
            { return token ("FLOAT",Float.parseFloat(yytext()));
            }
            // fall through
          case 74: break;
          case 11:
            { return token("DIVISION", yytext());
            }
            // fall through
          case 75: break;
          case 12:
            { return token("INTEGER", Integer.parseInt(yytext()));
            }
            // fall through
          case 76: break;
          case 13:
            { return token("DOS_PUNTOS",yytext());
            }
            // fall through
          case 77: break;
          case 14:
            { return token("PUNTO_COMA", yytext());
            }
            // fall through
          case 78: break;
          case 15:
            { return token("MENOR", yytext());
            }
            // fall through
          case 79: break;
          case 16:
            { return token("SIGNO_IGUAL", yytext());
            }
            // fall through
          case 80: break;
          case 17:
            { return token("MAYOR", yytext());
            }
            // fall through
          case 81: break;
          case 18:
            { return token("IDENTIFICADOR", yytext());
            }
            // fall through
          case 82: break;
          case 19:
            { return token("C_ABRE", yytext());
            }
            // fall through
          case 83: break;
          case 20:
            { return token("C_CIERRA", yytext());
            }
            // fall through
          case 84: break;
          case 21:
            { return token("LLAVE_A", yytext());
            }
            // fall through
          case 85: break;
          case 22:
            { return token("LLAVE_B", yytext());
            }
            // fall through
          case 86: break;
          case 23:
            { string.append(yytext());
            }
            // fall through
          case 87: break;
          case 24:
            { 
            }
            // fall through
          case 88: break;
          case 25:
            { yybegin(YYINITIAL);
                                    String stringValor = string.toString();
                                    string.setLength(0);
                                    return token("STRING", stringValor);
            }
            // fall through
          case 89: break;
          case 26:
            { return token("DISTINTO", yytext());
            }
            // fall through
          case 90: break;
          case 27:
            { yybegin(COMMENT_M);
                            	comment_cont++;
            }
            // fall through
          case 91: break;
          case 28:
            { throw new Error("Comentario no balanceado:");
            }
            // fall through
          case 92: break;
          case 29:
            { return token("ASIG", yytext());
            }
            // fall through
          case 93: break;
          case 30:
            { return token("MENOR_IGUAL", yytext());
            }
            // fall through
          case 94: break;
          case 31:
            { return token("IGUAL", yytext());
            }
            // fall through
          case 95: break;
          case 32:
            { return token("MAYOR_IGUAL", yytext());
            }
            // fall through
          case 96: break;
          case 33:
            { return token("OR", yytext());
            }
            // fall through
          case 97: break;
          case 34:
            { string.append("\"");
            }
            // fall through
          case 98: break;
          case 35:
            { string.append("\\");
            }
            // fall through
          case 99: break;
          case 36:
            { string.append("\n");
            }
            // fall through
          case 100: break;
          case 37:
            { string.append("\t");
            }
            // fall through
          case 101: break;
          case 38:
            { comment_cont++;
            }
            // fall through
          case 102: break;
          case 39:
            { comment_cont--;
                            	if (comment_cont == 0)
                            	{
                                	yybegin(YYINITIAL);
                            	}
            }
            // fall through
          case 103: break;
          case 40:
            { return token("AND", yytext());
            }
            // fall through
          case 104: break;
          case 41:
            { return token("PR_END", yytext());
            }
            // fall through
          case 105: break;
          case 42:
            { return token("NOT", yytext());
            }
            // fall through
          case 106: break;
          case 43:
            { return token("PR_ELSE", yytext());
            }
            // fall through
          case 107: break;
          case 44:
            { return token("PR_SHOW", yytext());
            }
            // fall through
          case 108: break;
          case 45:
            { return token("PR_THEN", yytext());
            }
            // fall through
          case 109: break;
          case 46:
            { return token("BOOLEAN", yytext());
            }
            // fall through
          case 110: break;
          case 47:
            { return token("DUPLE", yytext());
            }
            // fall through
          case 111: break;
          case 48:
            { return token("PR_BREAK", yytext());
            }
            // fall through
          case 112: break;
          case 49:
            { return token("PR_DUPLE", yytext());
            }
            // fall through
          case 113: break;
          case 50:
            { return token("PR_FLOAT", yytext());
            }
            // fall through
          case 114: break;
          case 51:
            { return token("PR_UNTIL", yytext());
            }
            // fall through
          case 115: break;
          case 52:
            { return token("PR_REPEAT", yytext());
            }
            // fall through
          case 116: break;
          case 53:
            { return token("PR_UNLESS", yytext());
            }
            // fall through
          case 117: break;
          case 54:
            { return token("PR_BOOLEAN", yytext());
            }
            // fall through
          case 118: break;
          case 55:
            { return token("PR_INTEGER", yytext());
            }
            // fall through
          case 119: break;
          case 56:
            { return token("PR_CONTINUE", yytext());
            }
            // fall through
          case 120: break;
          case 57:
            { return token("PR_INPUT_INT", yytext());
            }
            // fall through
          case 121: break;
          case 58:
            { return token("PR_INPUT_BOOL", yytext());
            }
            // fall through
          case 122: break;
          case 59:
            { return token("PR_INPUT_DUPLE", yytext());
            }
            // fall through
          case 123: break;
          case 60:
            { return token("PR_INPUT_FLOAT", yytext());
            }
            // fall through
          case 124: break;
          case 61:
            { return token("PR_DECLARE.SECTION", yytext());
            }
            // fall through
          case 125: break;
          case 62:
            { return token("PR_PROGRAM.SECTION", yytext());
            }
            // fall through
          case 126: break;
          case 63:
            { return token("PR_ENDDECLARE.SECTION", yytext());
            }
            // fall through
          case 127: break;
          case 64:
            { return token("PR_ENDPROGRAM.SECTION", yytext());
            }
            // fall through
          case 128: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
