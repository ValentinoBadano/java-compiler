// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/compiler/lexico/lexico.flex

/* JFlex example: partial Java language lexer specification */
package compiler.lexico;


import java_cup.sym;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class MiLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int COMMENT_M = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\10\u3000\31\u1f00\1\u0100\1\u3100\1\u3200"+
    "\1\u0100\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u3b00\1\u0100\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u4200\1\u1f00\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00"+
    "\1\u4f00\1\u5000\1\u5100\1\u1f00\3\u0100\1\u5200\1\u5300\1\u5400"+
    "\12\u1f00\4\u0100\1\u5500\17\u1f00\2\u0100\1\u5600\41\u1f00\2\u0100"+
    "\1\u5700\1\u5800\2\u1f00\1\u5900\1\u5a00\27\u0100\1\u5b00\2\u0100"+
    "\1\u5c00\45\u1f00\1\u0100\1\u5d00\1\u5e00\11\u1f00\1\u5f00\24\u1f00"+
    "\1\u6000\1\u6100\1\u1f00\1\u6200\1\u6300\1\u6400\1\u6500\2\u1f00"+
    "\1\u6600\5\u1f00\1\u6700\1\u6800\1\u6900\5\u1f00\1\u6a00\1\u6b00"+
    "\4\u1f00\1\u6c00\2\u1f00\1\u6d00\16\u1f00\246\u0100\1\u6e00\20\u0100"+
    "\1\u6f00\1\u7000\25\u0100\1\u7100\34\u0100\1\u7200\14\u1f00\2\u0100"+
    "\1\u7300\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\6\1\7\1\10\4\0\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\12\21\1\22\1\0\1\23"+
    "\1\24\1\25\2\0\32\26\1\27\1\30\1\31\1\0"+
    "\1\32\1\0\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\26\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\26\1\52\1\53\1\54\1\55\1\26"+
    "\1\56\3\26\12\0\1\3\32\0\1\57\11\0\1\26"+
    "\12\0\1\26\4\0\1\26\5\0\27\26\1\0\37\26"+
    "\1\0\u01ca\26\4\0\14\26\16\0\5\26\7\0\1\26"+
    "\1\0\1\26\21\0\165\26\1\0\2\26\2\0\4\26"+
    "\1\0\1\26\6\0\1\26\1\0\3\26\1\0\1\26"+
    "\1\0\24\26\1\0\123\26\1\0\213\26\1\0\255\26"+
    "\1\0\46\26\2\0\1\26\6\0\51\26\10\0\55\26"+
    "\1\0\1\26\1\0\2\26\1\0\2\26\1\0\1\26"+
    "\10\0\33\26\4\0\4\26\35\0\13\26\5\0\100\26"+
    "\12\21\4\0\146\26\1\0\10\26\2\0\12\26\1\0"+
    "\6\26\12\21\3\26\2\0\1\26\20\0\73\26\2\0"+
    "\145\26\16\0\12\21\54\26\4\0\1\26\2\0\1\26"+
    "\2\0\56\26\22\0\34\26\4\0\13\26\65\0\25\26"+
    "\1\0\10\26\25\0\17\26\1\0\201\26\2\0\12\21"+
    "\1\0\23\26\1\0\10\26\2\0\2\26\2\0\26\26"+
    "\1\0\7\26\1\0\1\26\3\0\4\26\2\0\11\26"+
    "\2\0\2\26\2\0\4\26\10\0\1\26\4\0\2\26"+
    "\1\0\5\26\2\0\12\21\2\26\12\0\1\26\1\0"+
    "\1\26\2\0\3\26\1\0\6\26\4\0\2\26\2\0"+
    "\26\26\1\0\7\26\1\0\2\26\1\0\2\26\1\0"+
    "\2\26\2\0\1\26\1\0\5\26\4\0\2\26\2\0"+
    "\3\26\3\0\1\26\7\0\4\26\1\0\1\26\7\0"+
    "\12\21\6\26\13\0\3\26\1\0\11\26\1\0\3\26"+
    "\1\0\26\26\1\0\7\26\1\0\2\26\1\0\5\26"+
    "\2\0\12\26\1\0\3\26\1\0\3\26\2\0\1\26"+
    "\17\0\4\26\2\0\12\21\11\0\7\26\1\0\3\26"+
    "\1\0\10\26\2\0\2\26\2\0\26\26\1\0\7\26"+
    "\1\0\2\26\1\0\5\26\2\0\11\26\2\0\2\26"+
    "\2\0\3\26\10\0\2\26\4\0\2\26\1\0\5\26"+
    "\2\0\12\21\1\0\1\26\20\0\2\26\1\0\6\26"+
    "\3\0\3\26\1\0\4\26\3\0\2\26\1\0\1\26"+
    "\1\0\2\26\3\0\2\26\3\0\3\26\3\0\14\26"+
    "\4\0\5\26\3\0\3\26\1\0\4\26\2\0\1\26"+
    "\6\0\1\26\16\0\12\21\20\0\15\26\1\0\3\26"+
    "\1\0\27\26\1\0\20\26\3\0\10\26\1\0\3\26"+
    "\1\0\4\26\7\0\2\26\1\0\3\26\5\0\4\26"+
    "\2\0\12\21\20\0\4\26\1\0\10\26\1\0\3\26"+
    "\1\0\27\26\1\0\12\26\1\0\5\26\2\0\11\26"+
    "\1\0\3\26\1\0\4\26\7\0\2\26\7\0\1\26"+
    "\1\0\4\26\2\0\12\21\1\0\2\26\15\0\4\26"+
    "\1\0\10\26\1\0\3\26\1\0\63\26\1\0\3\26"+
    "\1\0\5\26\5\0\4\26\7\0\5\26\2\0\12\21"+
    "\12\0\6\26\2\0\2\26\1\0\22\26\3\0\30\26"+
    "\1\0\11\26\1\0\1\26\2\0\7\26\3\0\1\26"+
    "\4\0\6\26\1\0\1\26\1\0\10\26\6\0\12\21"+
    "\2\0\2\26\15\0\72\26\5\0\17\26\1\0\12\21"+
    "\47\0\2\26\1\0\1\26\1\0\5\26\1\0\30\26"+
    "\1\0\1\26\1\0\27\26\2\0\5\26\1\0\1\26"+
    "\1\0\6\26\2\0\12\21\2\0\4\26\40\0\1\26"+
    "\27\0\2\26\6\0\12\21\13\0\1\26\1\0\1\26"+
    "\1\0\1\26\4\0\12\26\1\0\44\26\4\0\24\26"+
    "\1\0\22\26\1\0\44\26\11\0\1\26\71\0\100\26"+
    "\12\21\6\0\100\26\12\21\4\26\2\0\46\26\1\0"+
    "\1\26\5\0\1\26\2\0\53\26\1\0\115\26\1\0"+
    "\4\26\2\0\7\26\1\0\1\26\1\0\4\26\2\0"+
    "\51\26\1\0\4\26\2\0\41\26\1\0\4\26\2\0"+
    "\7\26\1\0\1\26\1\0\4\26\2\0\17\26\1\0"+
    "\71\26\1\0\4\26\2\0\103\26\2\0\3\26\40\0"+
    "\20\26\20\0\126\26\2\0\6\26\3\0\u016c\26\2\0"+
    "\21\26\1\57\32\26\5\0\113\26\3\0\13\26\7\0"+
    "\15\26\1\0\7\26\13\0\25\26\13\0\24\26\14\0"+
    "\15\26\1\0\3\26\1\0\2\26\14\0\124\26\3\0"+
    "\1\26\4\0\2\26\2\0\12\21\41\0\3\26\2\0"+
    "\12\21\6\0\131\26\7\0\53\26\5\0\106\26\12\0"+
    "\37\26\1\0\14\26\4\0\14\26\12\0\12\21\36\26"+
    "\2\0\5\26\13\0\54\26\4\0\32\26\6\0\12\21"+
    "\46\0\34\26\4\0\77\26\1\0\35\26\2\0\1\26"+
    "\12\21\6\0\12\21\15\0\1\26\10\0\17\26\101\0"+
    "\114\26\4\0\12\21\21\0\11\26\14\0\60\26\12\21"+
    "\72\26\14\0\70\26\10\0\12\21\3\0\3\26\12\21"+
    "\44\26\2\0\11\26\7\0\53\26\2\0\3\26\20\0"+
    "\3\26\1\0\47\26\5\0\372\26\1\0\33\26\2\0"+
    "\6\26\2\0\46\26\2\0\6\26\2\0\10\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\37\26\2\0"+
    "\65\26\1\0\7\26\1\0\1\26\3\0\3\26\1\0"+
    "\7\26\3\0\4\26\2\0\6\26\4\0\15\26\5\0"+
    "\3\26\1\0\7\26\3\0\13\57\35\0\2\3\5\0"+
    "\1\57\17\0\2\26\23\0\1\26\12\0\1\57\21\0"+
    "\1\26\15\0\1\26\20\0\15\26\63\0\41\26\21\0"+
    "\1\26\4\0\1\26\2\0\12\26\1\0\1\26\3\0"+
    "\5\26\6\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\1\0\13\26\2\0\4\26\5\0\5\26\4\0"+
    "\1\26\21\0\51\26\u022d\0\64\26\26\0\57\26\1\0"+
    "\57\26\1\0\205\26\6\0\11\26\14\0\46\26\1\0"+
    "\1\26\5\0\1\26\2\0\70\26\7\0\1\26\17\0"+
    "\30\26\11\0\7\26\1\0\7\26\1\0\7\26\1\0"+
    "\7\26\1\0\7\26\1\0\7\26\1\0\7\26\1\0"+
    "\7\26\1\0\40\26\57\0\1\26\320\0\1\57\4\0"+
    "\3\26\31\0\17\26\1\0\5\26\2\0\5\26\4\0"+
    "\126\26\2\0\2\26\2\0\3\26\1\0\132\26\1\0"+
    "\4\26\5\0\53\26\1\0\136\26\21\0\33\26\65\0"+
    "\306\26\112\0\360\26\20\0\215\26\103\0\56\26\2\0"+
    "\15\26\3\0\20\26\12\21\2\26\24\0\63\26\1\0"+
    "\12\26\1\0\163\26\45\0\11\26\2\0\147\26\2\0"+
    "\65\26\2\0\5\26\60\0\61\26\30\0\64\26\14\0"+
    "\106\26\12\0\12\21\6\0\30\26\3\0\1\26\1\0"+
    "\3\26\12\21\44\26\2\0\44\26\14\0\35\26\3\0"+
    "\101\26\16\0\1\26\12\21\6\0\20\26\12\21\5\26"+
    "\1\0\67\26\11\0\16\26\2\0\12\21\6\0\27\26"+
    "\3\0\111\26\30\0\3\26\2\0\20\26\2\0\5\26"+
    "\12\0\6\26\2\0\6\26\2\0\6\26\11\0\7\26"+
    "\1\0\7\26\1\0\53\26\1\0\14\26\10\0\173\26"+
    "\1\0\2\26\2\0\12\21\6\0\244\26\14\0\27\26"+
    "\4\0\61\26\4\0\u0100\60\156\26\2\0\152\26\46\0"+
    "\7\26\14\0\5\26\5\0\14\26\1\0\15\26\1\0"+
    "\5\26\1\0\1\26\1\0\2\26\1\0\2\26\1\0"+
    "\154\26\41\0\153\26\22\0\100\26\2\0\66\26\50\0"+
    "\14\26\4\0\20\26\20\0\20\26\3\0\2\26\30\0"+
    "\3\26\40\0\5\26\1\0\207\26\23\0\12\21\7\0"+
    "\32\26\4\0\1\26\1\0\32\26\13\0\131\26\3\0"+
    "\6\26\2\0\6\26\2\0\6\26\2\0\3\26\43\0"+
    "\14\26\1\0\32\26\1\0\23\26\1\0\2\26\1\0"+
    "\17\26\2\0\16\26\42\0\173\26\105\0\65\26\210\0"+
    "\1\26\202\0\35\26\3\0\61\26\17\0\1\26\37\0"+
    "\40\26\15\0\36\26\5\0\53\26\5\0\36\26\2\0"+
    "\44\26\4\0\10\26\1\0\5\26\52\0\236\26\2\0"+
    "\12\21\6\0\44\26\4\0\44\26\4\0\50\26\10\0"+
    "\64\26\234\0\67\26\11\0\26\26\12\0\10\26\230\0"+
    "\6\26\2\0\1\26\1\0\54\26\1\0\2\26\3\0"+
    "\1\26\2\0\27\26\12\0\27\26\11\0\37\26\101\0"+
    "\23\26\1\0\2\26\12\0\26\26\12\0\32\26\106\0"+
    "\70\26\6\0\2\26\100\0\4\26\1\0\2\26\5\0"+
    "\10\26\1\0\3\26\1\0\35\26\2\0\3\26\4\0"+
    "\1\26\40\0\35\26\3\0\35\26\43\0\10\26\1\0"+
    "\36\26\31\0\66\26\12\0\26\26\12\0\23\26\15\0"+
    "\22\26\156\0\111\26\67\0\63\26\15\0\63\26\15\0"+
    "\50\26\10\0\12\21\306\0\35\26\12\0\1\26\10\0"+
    "\41\26\217\0\27\26\11\0\107\26\37\0\12\21\17\0"+
    "\74\26\25\0\31\26\7\0\12\21\6\0\65\26\1\0"+
    "\12\21\4\0\3\26\11\0\44\26\2\0\1\26\11\0"+
    "\105\26\4\0\4\26\3\0\12\21\1\26\1\0\1\26"+
    "\43\0\22\26\1\0\45\26\6\0\1\26\101\0\7\26"+
    "\1\0\1\26\1\0\4\26\1\0\17\26\1\0\12\26"+
    "\7\0\73\26\5\0\12\21\6\0\4\26\1\0\10\26"+
    "\2\0\2\26\2\0\26\26\1\0\7\26\1\0\2\26"+
    "\1\0\5\26\1\0\12\26\2\0\2\26\2\0\3\26"+
    "\2\0\1\26\6\0\1\26\5\0\7\26\2\0\7\26"+
    "\3\0\5\26\213\0\113\26\5\0\12\21\4\0\2\26"+
    "\40\0\106\26\1\0\1\26\10\0\12\21\246\0\66\26"+
    "\2\0\11\26\27\0\6\26\42\0\101\26\3\0\1\26"+
    "\13\0\12\21\46\0\71\26\7\0\12\21\66\0\33\26"+
    "\2\0\17\26\4\0\12\21\306\0\73\26\145\0\100\26"+
    "\12\21\25\0\1\26\240\0\10\26\2\0\56\26\2\0"+
    "\10\26\1\0\2\26\33\0\77\26\10\0\1\26\10\0"+
    "\112\26\3\0\1\26\42\0\71\26\7\0\11\26\1\0"+
    "\55\26\1\0\11\26\17\0\12\21\30\0\36\26\2\0"+
    "\26\26\1\0\16\26\111\0\7\26\1\0\2\26\1\0"+
    "\54\26\3\0\1\26\1\0\2\26\1\0\11\26\10\0"+
    "\12\21\6\0\6\26\1\0\2\26\1\0\45\26\1\0"+
    "\2\26\1\0\6\26\7\0\12\21\u0136\0\27\26\11\0"+
    "\232\26\146\0\157\26\21\0\304\26\274\0\57\26\321\0"+
    "\107\26\271\0\71\26\7\0\37\26\1\0\12\21\146\0"+
    "\36\26\2\0\5\26\13\0\67\26\11\0\4\26\14\0"+
    "\12\21\11\0\25\26\5\0\23\26\260\0\100\26\200\0"+
    "\113\26\4\0\71\26\7\0\21\26\100\0\2\26\1\0"+
    "\1\26\34\0\370\26\10\0\363\26\15\0\37\26\61\0"+
    "\3\26\21\0\4\26\10\0\u018c\26\4\0\153\26\5\0"+
    "\15\26\3\0\11\26\7\0\12\26\3\0\2\26\306\0"+
    "\5\26\3\0\6\26\10\0\10\26\2\0\7\26\36\0"+
    "\4\26\224\0\3\26\273\0\125\26\1\0\107\26\1\0"+
    "\2\26\2\0\1\26\2\0\2\26\2\0\4\26\1\0"+
    "\14\26\1\0\1\26\1\0\7\26\1\0\101\26\1\0"+
    "\4\26\2\0\10\26\1\0\7\26\1\0\34\26\1\0"+
    "\4\26\1\0\5\26\1\0\1\26\3\0\7\26\1\0"+
    "\u0154\26\2\0\31\26\1\0\31\26\1\0\37\26\1\0"+
    "\31\26\1\0\37\26\1\0\31\26\1\0\37\26\1\0"+
    "\31\26\1\0\37\26\1\0\31\26\1\0\10\26\2\0"+
    "\62\21\67\26\4\0\62\26\10\0\1\26\16\0\1\26"+
    "\26\0\5\26\1\0\17\26\120\0\7\26\1\0\21\26"+
    "\2\0\7\26\1\0\2\26\1\0\5\26\325\0\55\26"+
    "\3\0\16\26\2\0\12\21\4\0\1\26\u0171\0\60\26"+
    "\12\21\6\0\305\26\13\0\7\26\51\0\114\26\4\0"+
    "\12\21\246\0\4\26\1\0\33\26\1\0\2\26\1\0"+
    "\1\26\2\0\1\26\1\0\12\26\1\0\4\26\1\0"+
    "\1\26\1\0\1\26\6\0\1\26\4\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\3\26\1\0\2\26\1\0"+
    "\1\26\2\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\2\26\1\0\1\26\2\0"+
    "\4\26\1\0\7\26\1\0\4\26\1\0\4\26\1\0"+
    "\1\26\1\0\12\26\1\0\21\26\5\0\3\26\1\0"+
    "\5\26\1\0\21\26\164\0\32\26\6\0\32\26\6\0"+
    "\32\26\166\0\327\26\51\0\65\26\13\0\336\26\2\0"+
    "\u0182\26\16\0\u0131\26\37\0\36\26\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29696];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\1\1\3\1\2\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\1\1\12\1\13\1\14"+
    "\1\15\1\1\1\16\1\17\1\20\1\21\16\17\1\22"+
    "\1\23\4\24\1\25\1\0\1\26\3\0\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\15\17\1\35\6\17\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\0\1\44\6\17"+
    "\1\45\5\17\1\46\7\17\2\0\5\17\1\47\10\17"+
    "\1\50\1\51\1\52\2\17\3\0\1\17\1\53\2\17"+
    "\1\54\3\17\1\55\5\17\1\56\1\0\11\17\1\57"+
    "\1\60\1\0\1\61\1\62\11\17\1\63\1\17\1\64"+
    "\1\0\10\17\1\0\1\17\1\0\3\17\1\65\3\17"+
    "\1\66\1\0\1\17\1\0\3\17\1\67\2\17\1\0"+
    "\1\17\1\0\1\17\1\0\1\17\1\0\1\17\1\70"+
    "\1\71\1\0\1\17\1\0\1\17\1\0\1\17\1\0"+
    "\1\17\1\0\1\17\1\0\1\17\1\0\1\17\1\0"+
    "\1\17\1\0\1\17\1\0\1\17\1\0\1\17\1\0"+
    "\1\17\1\0\1\17\2\72\1\0\1\17\1\0\1\17"+
    "\2\73\1\0\1\17\1\0\1\17\1\0\1\17\1\0"+
    "\1\17\2\74\2\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\223\0\304\0\365\0\223"+
    "\0\u0126\0\u0157\0\223\0\u0188\0\223\0\223\0\223\0\u01b9"+
    "\0\223\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df\0\223"+
    "\0\223\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436"+
    "\0\u0467\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u055c\0\u058d\0\223"+
    "\0\223\0\u05be\0\223\0\u05ef\0\u0620\0\223\0\u0651\0\223"+
    "\0\u0682\0\u06b3\0\u06e4\0\223\0\u01b9\0\223\0\223\0\223"+
    "\0\223\0\u0715\0\u0746\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b"+
    "\0\u086c\0\u089d\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u02df\0\u0992"+
    "\0\u09c3\0\u09f4\0\u0a25\0\u0a56\0\u0a87\0\223\0\223\0\223"+
    "\0\223\0\223\0\223\0\u0ab8\0\u02df\0\u0ae9\0\u0b1a\0\u0b4b"+
    "\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3"+
    "\0\u0d04\0\u02df\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a"+
    "\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2"+
    "\0\u02df\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u10a7\0\u10d8\0\u1109"+
    "\0\u113a\0\u02df\0\u02df\0\u02df\0\u116b\0\u119c\0\u11cd\0\u11fe"+
    "\0\u122f\0\u1260\0\u02df\0\u1291\0\u12c2\0\u02df\0\u12f3\0\u1324"+
    "\0\u1355\0\u02df\0\u1386\0\u13b7\0\u13e8\0\u1419\0\u144a\0\u02df"+
    "\0\u147b\0\u14ac\0\u14dd\0\u150e\0\u153f\0\u1570\0\u15a1\0\u15d2"+
    "\0\u1603\0\u1634\0\u02df\0\u02df\0\u1665\0\223\0\u02df\0\u1696"+
    "\0\u16c7\0\u16f8\0\u1729\0\u175a\0\u178b\0\u17bc\0\u17ed\0\u181e"+
    "\0\u02df\0\u184f\0\u02df\0\u1880\0\u18b1\0\u18e2\0\u1913\0\u1944"+
    "\0\u1975\0\u19a6\0\u19d7\0\u1a08\0\u1a39\0\u1a6a\0\u1a9b\0\u1acc"+
    "\0\u1afd\0\u1b2e\0\u02df\0\u1b5f\0\u1b90\0\u1bc1\0\u02df\0\u1bf2"+
    "\0\u1c23\0\u1c54\0\u1c85\0\u1cb6\0\u1ce7\0\u02df\0\u1d18\0\u1d49"+
    "\0\u1d7a\0\u1dab\0\u1ddc\0\u1e0d\0\u1e3e\0\u1e6f\0\u1ea0\0\u1ed1"+
    "\0\u02df\0\u02df\0\u1f02\0\u1f33\0\u1f64\0\u1f95\0\u1fc6\0\u1ff7"+
    "\0\u2028\0\u2059\0\u208a\0\u20bb\0\u20ec\0\u211d\0\u214e\0\u217f"+
    "\0\u21b0\0\u21e1\0\u2212\0\u2243\0\u2274\0\u22a5\0\u22d6\0\u2307"+
    "\0\u2338\0\u2369\0\u239a\0\u23cb\0\223\0\u02df\0\u23fc\0\u242d"+
    "\0\u245e\0\u248f\0\223\0\u02df\0\u24c0\0\u24f1\0\u2522\0\u2553"+
    "\0\u2584\0\u25b5\0\u25e6\0\u2617\0\223\0\u02df\0\223\0\u02df";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\4"+
    "\1\31\1\4\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\2\27\1\40\3\27\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\27\2\4\7\50\1\51\20\50\1\52"+
    "\30\50\11\53\1\54\1\53\1\55\45\53\63\0\1\5"+
    "\102\0\1\56\34\0\2\11\4\0\52\11\2\0\5\57"+
    "\5\0\1\60\2\0\1\61\1\62\1\0\1\63\35\0"+
    "\1\57\13\0\1\64\67\0\1\65\56\0\1\65\1\0"+
    "\1\22\63\0\1\66\60\0\1\67\60\0\1\70\60\0"+
    "\1\71\55\0\1\27\4\0\1\27\3\0\25\27\23\0"+
    "\1\27\4\0\1\27\3\0\15\27\1\72\7\27\23\0"+
    "\1\27\4\0\1\27\3\0\16\27\1\73\1\27\1\74"+
    "\4\27\23\0\1\27\4\0\1\27\3\0\16\27\1\75"+
    "\6\27\23\0\1\27\4\0\1\27\3\0\5\27\1\76"+
    "\15\27\1\77\1\27\23\0\1\27\4\0\1\27\3\0"+
    "\13\27\1\100\1\27\1\101\7\27\23\0\1\27\4\0"+
    "\1\27\3\0\1\27\1\102\7\27\1\103\1\27\1\104"+
    "\11\27\23\0\1\27\4\0\1\27\3\0\15\27\1\105"+
    "\7\27\23\0\1\27\4\0\1\27\3\0\16\27\1\106"+
    "\6\27\23\0\1\27\4\0\1\27\3\0\20\27\1\107"+
    "\4\27\23\0\1\27\4\0\1\27\3\0\20\27\1\110"+
    "\4\27\23\0\1\27\4\0\1\27\3\0\5\27\1\111"+
    "\17\27\23\0\1\27\4\0\1\27\3\0\10\27\1\112"+
    "\14\27\23\0\1\27\4\0\1\27\3\0\10\27\1\113"+
    "\7\27\1\114\4\27\23\0\1\27\4\0\1\27\3\0"+
    "\15\27\1\115\7\27\11\0\1\116\20\0\1\117\16\0"+
    "\1\120\4\0\1\121\17\0\1\122\57\0\1\123\47\0"+
    "\5\57\10\0\1\61\1\62\1\0\1\63\35\0\1\57"+
    "\20\0\1\62\1\0\1\63\60\0\1\124\56\0\1\124"+
    "\1\0\1\63\60\0\1\27\4\0\1\27\3\0\4\27"+
    "\1\125\20\27\23\0\1\27\4\0\1\27\3\0\16\27"+
    "\1\126\6\27\23\0\1\27\4\0\1\27\3\0\5\27"+
    "\1\127\17\27\23\0\1\27\4\0\1\27\3\0\15\27"+
    "\1\130\7\27\23\0\1\27\4\0\1\27\3\0\3\27"+
    "\1\131\21\27\23\0\1\27\4\0\1\27\3\0\17\27"+
    "\1\132\5\27\23\0\1\27\4\0\1\27\3\0\21\27"+
    "\1\133\3\27\23\0\1\27\4\0\1\27\3\0\4\27"+
    "\1\134\20\27\23\0\1\27\4\0\1\27\3\0\13\27"+
    "\1\135\11\27\23\0\1\27\4\0\1\27\3\0\2\27"+
    "\1\136\22\27\23\0\1\27\4\0\1\27\3\0\16\27"+
    "\1\137\6\27\23\0\1\27\4\0\1\27\3\0\17\27"+
    "\1\140\2\27\1\141\2\27\23\0\1\27\4\0\1\27"+
    "\3\0\22\27\1\142\2\27\23\0\1\27\4\0\1\27"+
    "\3\0\16\27\1\143\6\27\23\0\1\27\4\0\1\27"+
    "\3\0\17\27\1\144\5\27\23\0\1\27\4\0\1\27"+
    "\3\0\16\27\1\145\6\27\23\0\1\27\4\0\1\27"+
    "\3\0\5\27\1\146\17\27\23\0\1\27\4\0\1\27"+
    "\3\0\23\27\1\147\1\27\23\0\1\27\4\0\1\27"+
    "\3\0\13\27\1\150\6\27\1\151\2\27\3\0\5\152"+
    "\7\0\1\153\3\0\1\124\35\0\1\152\22\0\1\27"+
    "\4\0\1\27\3\0\13\27\1\154\11\27\23\0\1\27"+
    "\4\0\1\27\3\0\1\27\1\155\23\27\23\0\1\27"+
    "\4\0\1\27\3\0\22\27\1\156\2\27\23\0\1\27"+
    "\4\0\1\27\3\0\13\27\1\157\11\27\23\0\1\27"+
    "\4\0\1\27\3\0\13\27\1\160\11\27\23\0\1\27"+
    "\4\0\1\27\3\0\5\27\1\161\17\27\23\0\1\27"+
    "\4\0\1\27\3\0\4\27\1\162\12\27\1\163\5\27"+
    "\23\0\1\27\4\0\1\27\3\0\21\27\1\147\3\27"+
    "\23\0\1\27\4\0\1\27\3\0\16\27\1\164\6\27"+
    "\23\0\1\27\4\0\1\27\3\0\1\27\1\165\23\27"+
    "\23\0\1\27\4\0\1\27\3\0\23\27\1\166\1\27"+
    "\23\0\1\27\4\0\1\27\3\0\5\27\1\167\17\27"+
    "\23\0\1\27\4\0\1\27\3\0\7\27\1\170\15\27"+
    "\23\0\1\27\4\0\1\27\3\0\5\27\1\171\17\27"+
    "\23\0\1\27\4\0\1\27\3\0\24\27\1\172\23\0"+
    "\1\27\4\0\1\27\3\0\15\27\1\173\7\27\23\0"+
    "\1\27\4\0\1\27\3\0\5\27\1\174\17\27\23\0"+
    "\1\27\4\0\1\27\3\0\5\27\1\175\17\27\23\0"+
    "\1\27\4\0\1\27\3\0\11\27\1\176\13\27\3\0"+
    "\5\152\7\0\1\153\41\0\1\152\2\0\5\153\10\0"+
    "\1\177\1\200\1\0\1\201\35\0\1\153\22\0\1\27"+
    "\4\0\1\27\3\0\5\27\1\202\17\27\23\0\1\27"+
    "\4\0\1\27\3\0\12\27\1\203\12\27\23\0\1\27"+
    "\4\0\1\27\3\0\11\27\1\204\13\27\23\0\1\27"+
    "\4\0\1\27\3\0\1\27\1\205\23\27\23\0\1\27"+
    "\4\0\1\27\3\0\5\27\1\206\17\27\23\0\1\27"+
    "\4\0\1\27\3\0\5\27\1\207\17\27\23\0\1\27"+
    "\4\0\1\27\3\0\20\27\1\210\4\27\23\0\1\27"+
    "\4\0\1\27\3\0\15\27\1\211\7\27\23\0\1\27"+
    "\4\0\1\27\3\0\22\27\1\212\2\27\23\0\1\27"+
    "\4\0\1\27\3\0\22\27\1\213\2\27\23\0\1\27"+
    "\4\0\1\27\3\0\7\27\1\214\15\27\23\0\1\27"+
    "\4\0\1\27\3\0\20\27\1\215\4\27\23\0\1\27"+
    "\4\0\1\27\3\0\1\27\1\216\23\27\23\0\1\27"+
    "\4\0\1\27\3\0\21\27\1\217\3\27\23\0\1\27"+
    "\4\0\1\27\3\0\13\27\1\220\11\27\21\0\1\200"+
    "\1\0\1\201\60\0\1\221\56\0\1\221\1\0\1\201"+
    "\60\0\1\27\4\0\1\27\3\0\1\27\1\222\23\27"+
    "\23\0\1\27\4\0\1\27\3\0\15\27\1\223\7\27"+
    "\23\0\1\27\4\0\1\27\3\0\20\27\1\224\4\27"+
    "\23\0\1\27\4\0\1\27\3\0\3\27\1\225\21\27"+
    "\23\0\1\27\4\0\1\27\3\0\16\27\1\226\6\27"+
    "\23\0\1\27\4\0\1\27\3\0\1\27\1\227\23\27"+
    "\23\0\1\27\4\0\1\27\3\0\1\230\24\27\23\0"+
    "\1\27\4\0\1\27\3\0\5\27\1\231\17\27\23\0"+
    "\1\27\4\0\1\27\3\0\1\27\1\232\23\27\23\0"+
    "\1\27\4\0\1\27\3\0\22\27\1\233\2\27\23\0"+
    "\1\27\4\0\1\27\3\0\21\27\1\234\3\27\3\0"+
    "\5\235\4\0\1\236\6\0\1\221\35\0\1\235\22\0"+
    "\1\27\4\0\1\27\3\0\15\27\1\237\7\27\23\0"+
    "\1\27\4\0\1\27\3\0\23\27\1\240\1\27\23\0"+
    "\1\27\4\0\1\27\3\0\5\27\1\241\17\27\23\0"+
    "\1\27\4\0\1\27\3\0\13\27\1\242\11\27\23\0"+
    "\1\27\4\0\1\27\3\0\7\27\1\243\15\27\23\0"+
    "\1\27\4\0\1\27\3\0\3\27\1\244\21\27\23\0"+
    "\1\27\4\0\1\27\3\0\2\27\1\245\1\27\1\246"+
    "\1\27\1\247\2\27\1\250\13\27\23\0\1\27\4\0"+
    "\1\27\3\0\20\27\1\251\4\27\23\0\1\27\4\0"+
    "\1\27\3\0\14\27\1\252\10\27\3\0\5\235\4\0"+
    "\1\236\44\0\1\235\22\0\1\27\4\0\1\27\3\0"+
    "\5\27\1\253\17\27\2\0\2\254\4\0\13\254\1\255"+
    "\4\254\1\255\3\254\25\255\1\254\22\0\1\27\4\0"+
    "\1\27\3\0\1\27\1\256\23\27\23\0\1\27\4\0"+
    "\1\27\3\0\20\27\1\257\4\27\23\0\1\27\4\0"+
    "\1\27\3\0\3\27\1\260\21\27\23\0\1\27\4\0"+
    "\1\27\3\0\16\27\1\261\6\27\23\0\1\27\4\0"+
    "\1\27\3\0\23\27\1\262\1\27\23\0\1\27\4\0"+
    "\1\27\3\0\13\27\1\263\11\27\23\0\1\27\4\0"+
    "\1\27\3\0\15\27\1\264\7\27\2\0\2\265\4\0"+
    "\13\265\1\266\4\265\1\266\3\265\25\266\1\265\54\0"+
    "\1\267\26\0\1\27\4\0\1\27\3\0\21\27\1\270"+
    "\3\27\23\0\1\27\4\0\1\27\3\0\20\27\1\271"+
    "\4\27\23\0\1\27\4\0\1\27\3\0\1\27\1\272"+
    "\23\27\23\0\1\27\4\0\1\27\3\0\11\27\1\273"+
    "\13\27\23\0\1\27\4\0\1\27\3\0\16\27\1\274"+
    "\6\27\23\0\1\27\4\0\1\27\3\0\17\27\1\275"+
    "\5\27\23\0\1\27\4\0\1\27\3\0\16\27\1\276"+
    "\6\27\23\0\1\27\4\0\1\27\3\0\22\27\1\277"+
    "\2\27\55\0\1\300\26\0\1\27\4\0\1\27\3\0"+
    "\21\27\1\301\3\27\41\0\1\302\42\0\1\27\4\0"+
    "\1\27\3\0\5\27\1\303\17\27\23\0\1\27\4\0"+
    "\1\27\3\0\5\27\1\304\17\27\23\0\1\27\4\0"+
    "\1\27\3\0\14\27\1\305\10\27\23\0\1\27\4\0"+
    "\1\27\3\0\13\27\1\306\11\27\23\0\1\27\4\0"+
    "\1\27\3\0\13\27\1\307\11\27\23\0\1\27\4\0"+
    "\1\27\3\0\1\27\1\310\23\27\41\0\1\311\42\0"+
    "\1\27\4\0\1\27\3\0\5\27\1\312\17\27\37\0"+
    "\1\313\44\0\1\27\4\0\1\27\3\0\3\27\1\314"+
    "\21\27\2\0\2\315\4\0\13\315\1\316\4\315\1\316"+
    "\3\315\25\316\1\315\1\0\2\317\4\0\13\317\1\320"+
    "\4\317\1\320\3\317\25\320\1\317\22\0\1\27\4\0"+
    "\1\27\3\0\5\27\1\321\17\27\23\0\1\27\4\0"+
    "\1\27\3\0\22\27\1\322\2\27\37\0\1\323\44\0"+
    "\1\27\4\0\1\27\3\0\3\27\1\324\21\27\56\0"+
    "\1\325\25\0\1\27\4\0\1\27\3\0\22\27\1\326"+
    "\2\27\55\0\1\327\26\0\1\27\4\0\1\27\3\0"+
    "\21\27\1\330\3\27\55\0\1\331\26\0\1\27\4\0"+
    "\1\27\3\0\21\27\1\332\3\27\56\0\1\333\25\0"+
    "\1\27\4\0\1\27\3\0\22\27\1\334\2\27\45\0"+
    "\1\335\36\0\1\27\4\0\1\27\3\0\11\27\1\336"+
    "\13\27\41\0\1\337\42\0\1\27\4\0\1\27\3\0"+
    "\5\27\1\340\17\27\41\0\1\341\42\0\1\27\4\0"+
    "\1\27\3\0\5\27\1\342\17\27\45\0\1\343\36\0"+
    "\1\27\4\0\1\27\3\0\11\27\1\344\13\27\52\0"+
    "\1\345\31\0\1\27\4\0\1\27\3\0\16\27\1\346"+
    "\6\27\37\0\1\347\44\0\1\27\4\0\1\27\3\0"+
    "\3\27\1\350\21\27\37\0\1\351\44\0\1\27\4\0"+
    "\1\27\3\0\3\27\1\352\21\27\52\0\1\353\31\0"+
    "\1\27\4\0\1\27\3\0\16\27\1\354\6\27\51\0"+
    "\1\355\32\0\1\27\4\0\1\27\3\0\15\27\1\356"+
    "\7\27\56\0\1\357\25\0\1\27\4\0\1\27\3\0"+
    "\22\27\1\360\2\27\56\0\1\361\25\0\1\27\4\0"+
    "\1\27\3\0\22\27\1\362\2\27\51\0\1\363\32\0"+
    "\1\27\4\0\1\27\3\0\15\27\1\364\7\27\45\0"+
    "\1\365\36\0\1\27\4\0\1\27\3\0\11\27\1\366"+
    "\13\27\45\0\1\367\36\0\1\27\4\0\1\27\3\0"+
    "\11\27\1\370\13\27\52\0\1\371\31\0\1\27\4\0"+
    "\1\27\3\0\16\27\1\372\6\27\52\0\1\373\31\0"+
    "\1\27\4\0\1\27\3\0\16\27\1\374\6\27\51\0"+
    "\1\375\32\0\1\27\4\0\1\27\3\0\15\27\1\376"+
    "\7\27\51\0\1\377\32\0\1\27\4\0\1\27\3\0"+
    "\15\27\1\u0100\7\27\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9800];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\2\1\1\11\2\1\1\11\1\1\3\11"+
    "\1\1\1\11\6\1\2\11\16\1\2\11\1\1\1\11"+
    "\2\1\1\11\1\0\1\11\3\0\1\11\1\1\4\11"+
    "\24\1\6\11\1\0\25\1\2\0\23\1\3\0\17\1"+
    "\1\0\13\1\1\0\1\11\15\1\1\0\10\1\1\0"+
    "\1\1\1\0\10\1\1\0\1\1\1\0\6\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\3\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\11\1\1\1\0\1\1\1\0\1\1\1\11"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\11\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    int string_yyline = 0;
    int string_yycolumn = 0;
    int comment_cont = 0;

    final StringBuffer string = new StringBuffer();

    private MiToken token(String nombre) {
        return new MiToken(nombre, this.yyline, this.yycolumn);
    }

    private MiToken token(String nombre, Object valor) {
        return new MiToken(nombre, this.yyline, this.yycolumn, valor);
    }

    private MiToken token(String nombre, int line, int column, Object valor) {
        return new MiToken(nombre, line, column, valor);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MiLexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case STRING: {
              throw new Error("Fin de archivo dentro de la cadena: \n" +
                                                     string.toString());
            }  // fall though
            case 257: break;
            case COMMENT_M: {
              throw new Error("Fin de archivo dentro del comentario");
            }  // fall though
            case 258: break;
            default:
          { return new java_cup.runtime.Symbol(sym.EOF); }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new Error("Caracter no permitido: <" + yytext() + ">");
            }
            // fall through
          case 62: break;
          case 2:
            { /* ignore */
            }
            // fall through
          case 63: break;
          case 3:
            { string.setLength(0);
                                string_yyline = this.yyline;
                                string_yycolumn = this.yycolumn;
                                yybegin(STRING);
            }
            // fall through
          case 64: break;
          case 4:
            { return token("P_ABRE");
            }
            // fall through
          case 65: break;
          case 5:
            { return token("P_CIERRA");
            }
            // fall through
          case 66: break;
          case 6:
            { return token("MULT");
            }
            // fall through
          case 67: break;
          case 7:
            { return token("MAS");
            }
            // fall through
          case 68: break;
          case 8:
            { return token("COMA",yytext());
            }
            // fall through
          case 69: break;
          case 9:
            { return token("MENOS");
            }
            // fall through
          case 70: break;
          case 10:
            { return token("DIV");
            }
            // fall through
          case 71: break;
          case 11:
            { return token("ENTERO", Integer.parseInt(yytext()));
            }
            // fall through
          case 72: break;
          case 12:
            { return token("DOS_PUNTOS");
            }
            // fall through
          case 73: break;
          case 13:
            { return token("MENOR");
            }
            // fall through
          case 74: break;
          case 14:
            { return token("MAYOR");
            }
            // fall through
          case 75: break;
          case 15:
            { return token("IDENTIFICADOR", yytext());
            }
            // fall through
          case 76: break;
          case 16:
            { return token("C_ABRE");
            }
            // fall through
          case 77: break;
          case 17:
            { return token("C_CIERRA");
            }
            // fall through
          case 78: break;
          case 18:
            { string.append(yytext());
            }
            // fall through
          case 79: break;
          case 19:
            { yybegin(YYINITIAL);
                                        return token("STRING_LITERAL",
                                        string_yyline, string_yycolumn,
                                        string.toString());
            }
            // fall through
          case 80: break;
          case 20:
            { 
            }
            // fall through
          case 81: break;
          case 21:
            { return token("DISTINTO");
            }
            // fall through
          case 82: break;
          case 22:
            { yybegin(COMMENT_M);
                            	comment_cont++;
            }
            // fall through
          case 83: break;
          case 23:
            { throw new Error("Comentario no balanceado:");
            }
            // fall through
          case 84: break;
          case 24:
            { return token ("FLOAT",Float.parseFloat(yytext()));
            }
            // fall through
          case 85: break;
          case 25:
            { return token("ASIGNACION");
            }
            // fall through
          case 86: break;
          case 26:
            { return token("MENOR_IGUAL");
            }
            // fall through
          case 87: break;
          case 27:
            { return token("IGUALDAD");
            }
            // fall through
          case 88: break;
          case 28:
            { return token("MAYOR_IGUAL");
            }
            // fall through
          case 89: break;
          case 29:
            { return token("OR");
            }
            // fall through
          case 90: break;
          case 30:
            { string.append("\"");
            }
            // fall through
          case 91: break;
          case 31:
            { string.append("\\");
            }
            // fall through
          case 92: break;
          case 32:
            { string.append("\n");
            }
            // fall through
          case 93: break;
          case 33:
            { string.append("\t");
            }
            // fall through
          case 94: break;
          case 34:
            { comment_cont++;
            }
            // fall through
          case 95: break;
          case 35:
            { comment_cont--;
                            	if (comment_cont == 0)
                            	{
                                	yybegin(YYINITIAL);
                            	}
            }
            // fall through
          case 96: break;
          case 36:
            { return token("AND");
            }
            // fall through
          case 97: break;
          case 37:
            { return token("PR_END");
            }
            // fall through
          case 98: break;
          case 38:
            { return token("NOT");
            }
            // fall through
          case 99: break;
          case 39:
            { return token("PR_ELSE");
            }
            // fall through
          case 100: break;
          case 40:
            { return token("PR_SHOW");
            }
            // fall through
          case 101: break;
          case 41:
            { return token("PR_THEN");
            }
            // fall through
          case 102: break;
          case 42:
            { return token("BOOLEAN", yytext());
            }
            // fall through
          case 103: break;
          case 43:
            { return token("PR_BREAK");
            }
            // fall through
          case 104: break;
          case 44:
            { return token("PR_DUPLE");
            }
            // fall through
          case 105: break;
          case 45:
            { return token("PR_FLOAT");
            }
            // fall through
          case 106: break;
          case 46:
            { return token("PR_UNTIL");
            }
            // fall through
          case 107: break;
          case 47:
            { return token("PR_REPEAT");
            }
            // fall through
          case 108: break;
          case 48:
            { return token("PR_UNLESS");
            }
            // fall through
          case 109: break;
          case 49:
            { return token("DUPLE", yytext());
            }
            // fall through
          case 110: break;
          case 50:
            { return token("PR_BOOLEAN");
            }
            // fall through
          case 111: break;
          case 51:
            { return token("PR_INTEGER");
            }
            // fall through
          case 112: break;
          case 52:
            { return token("PR_CONTINUE");
            }
            // fall through
          case 113: break;
          case 53:
            { return token("PR_FIBONACCI");
            }
            // fall through
          case 114: break;
          case 54:
            { return token("PR_INPUT_INT");
            }
            // fall through
          case 115: break;
          case 55:
            { return token("PR_INPUT_BOOL");
            }
            // fall through
          case 116: break;
          case 56:
            { return token("PR_INPUT_DUPLE");
            }
            // fall through
          case 117: break;
          case 57:
            { return token("PR_INPUT_FLOAT");
            }
            // fall through
          case 118: break;
          case 58:
            { return token("PR_DECLARE_SECTION");
            }
            // fall through
          case 119: break;
          case 59:
            { return token("PR_PROGRAM_SECTION");
            }
            // fall through
          case 120: break;
          case 60:
            { return token("PR_ENDDECLARE_SECTION");
            }
            // fall through
          case 121: break;
          case 61:
            { return token("PR_ENDPROGRAM_SECTION");
            }
            // fall through
          case 122: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
