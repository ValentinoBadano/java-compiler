
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compiler.sintactico;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java.io.FileReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.Hashtable;
import compiler.simbolo.*;
import compiler.ast.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\104\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\004\005\000\002\004\002\000\002\005\003" +
    "\000\002\005\004\000\002\006\005\000\002\007\005\000" +
    "\002\007\003\000\002\011\003\000\002\012\005\000\002" +
    "\012\002\000\002\013\003\000\002\013\004\000\002\015" +
    "\003\000\002\015\004\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\017\006\000\002" +
    "\020\011\000\002\020\007\000\002\021\006\000\002\021" +
    "\006\000\002\033\006\000\002\022\005\000\002\023\005" +
    "\000\002\023\003\000\002\024\005\000\002\024\003\000" +
    "\002\025\004\000\002\025\003\000\002\026\005\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\026\005\000\002\026\003\000\002\027\005" +
    "\000\002\027\005\000\002\027\003\000\002\030\005\000" +
    "\002\030\005\000\002\030\003\000\002\031\004\000\002" +
    "\031\005\000\002\031\003\000\002\031\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\034\005\000\002\034\005\000\002\034\005\000\002\034" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\166\000\010\002\ufffd\004\ufffd\006\005\001\002\000" +
    "\004\002\170\001\002\000\012\020\153\021\154\022\156" +
    "\023\151\001\002\000\004\002\000\001\002\000\006\002" +
    "\ufff5\004\011\001\002\000\004\002\uffff\001\002\000\012" +
    "\010\016\014\014\024\012\062\023\001\002\000\004\046" +
    "\144\001\002\000\020\005\ufff4\010\016\014\014\016\ufff4" +
    "\017\ufff4\024\012\062\023\001\002\000\034\025\025\026" +
    "\035\027\031\030\030\031\045\041\026\046\053\054\033" +
    "\055\041\056\052\057\034\060\036\062\050\001\002\000" +
    "\026\005\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb" +
    "\016\uffeb\017\uffeb\024\uffeb\062\uffeb\001\002\000\016\010" +
    "\016\012\126\013\127\014\014\024\012\062\023\001\002" +
    "\000\026\005\uffea\010\uffea\011\uffea\012\uffea\013\uffea\014" +
    "\uffea\016\uffea\017\uffea\024\uffea\062\uffea\001\002\000\026" +
    "\005\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec\016" +
    "\uffec\017\uffec\024\uffec\062\uffec\001\002\000\004\005\123" +
    "\001\002\000\026\005\uffed\010\uffed\011\uffed\012\uffed\013" +
    "\uffed\014\uffed\016\uffed\017\uffed\024\uffed\062\uffed\001\002" +
    "\000\004\045\024\001\002\000\034\025\025\026\035\027" +
    "\031\030\030\031\045\041\026\046\053\054\033\055\041" +
    "\056\052\057\034\060\036\062\050\001\002\000\004\046" +
    "\121\001\002\000\032\025\025\026\035\027\031\030\030" +
    "\031\045\041\026\046\053\055\041\056\052\057\034\060" +
    "\036\062\050\001\002\000\062\005\uffc6\010\uffc6\011\uffc6" +
    "\012\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\024" +
    "\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6" +
    "\040\uffc6\041\uffc6\042\uffc6\043\uffc6\047\uffc6\052\uffc6\053" +
    "\uffc6\062\uffc6\001\002\000\004\046\116\001\002\000\004" +
    "\046\114\001\002\000\056\005\uffd6\010\uffd6\011\uffd6\012" +
    "\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\024\uffd6" +
    "\032\101\033\104\034\102\035\100\036\103\037\105\040" +
    "\064\041\065\047\uffd6\052\uffd6\053\uffd6\062\uffd6\001\002" +
    "\000\034\025\025\026\035\027\031\030\030\031\045\041" +
    "\026\046\053\054\033\055\041\056\052\057\034\060\036" +
    "\062\050\001\002\000\062\005\uffc8\010\uffc8\011\uffc8\012" +
    "\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\024\uffc8" +
    "\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040" +
    "\uffc8\041\uffc8\042\uffc8\043\uffc8\047\uffc8\052\uffc8\053\uffc8" +
    "\062\uffc8\001\002\000\004\046\075\001\002\000\062\005" +
    "\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7" +
    "\016\uffc7\017\uffc7\024\uffc7\032\uffc7\033\uffc7\034\uffc7\035" +
    "\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7" +
    "\047\uffc7\052\uffc7\053\uffc7\062\uffc7\001\002\000\036\005" +
    "\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1" +
    "\016\uffe1\017\uffe1\024\uffe1\047\uffe1\052\060\053\uffe1\062" +
    "\uffe1\001\002\000\036\005\uffdf\010\uffdf\011\uffdf\012\uffdf" +
    "\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\024\uffdf\047" +
    "\uffdf\052\uffdf\053\uffdf\062\uffdf\001\002\000\062\005\uffc9" +
    "\010\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016" +
    "\uffc9\017\uffc9\024\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9" +
    "\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\047" +
    "\uffc9\052\uffc9\053\uffc9\062\uffc9\001\002\000\062\005\uffd0" +
    "\010\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016" +
    "\uffd0\017\uffd0\024\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0" +
    "\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\047" +
    "\uffd0\052\uffd0\053\uffd0\062\uffd0\001\002\000\062\005\uffd3" +
    "\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016" +
    "\uffd3\017\uffd3\024\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3" +
    "\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\070\043\071\047" +
    "\uffd3\052\uffd3\053\uffd3\062\uffd3\001\002\000\030\005\uffe3" +
    "\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\016\uffe3\017" +
    "\uffe3\024\uffe3\053\055\062\uffe3\001\002\000\004\046\062" +
    "\001\002\000\062\005\uffcd\010\uffcd\011\uffcd\012\uffcd\013" +
    "\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\024\uffcd\032\uffcd" +
    "\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041" +
    "\uffcd\042\uffcd\043\uffcd\047\uffcd\052\uffcd\053\uffcd\062\uffcd" +
    "\001\002\000\036\005\uffdd\010\uffdd\011\uffdd\012\uffdd\013" +
    "\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\024\uffdd\047\uffdd" +
    "\052\uffdd\053\uffdd\062\uffdd\001\002\000\062\005\uffcb\010" +
    "\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb" +
    "\017\uffcb\024\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036" +
    "\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\047\uffcb" +
    "\052\uffcb\053\uffcb\062\uffcb\001\002\000\062\005\uffcc\010" +
    "\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc" +
    "\017\uffcc\024\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036" +
    "\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\047\uffcc" +
    "\052\uffcc\053\uffcc\062\uffcc\001\002\000\062\005\uffca\010" +
    "\uffca\011\uffca\012\uffca\013\uffca\014\uffca\015\uffca\016\uffca" +
    "\017\uffca\024\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036" +
    "\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca\047\uffca" +
    "\052\uffca\053\uffca\062\uffca\001\002\000\034\025\025\026" +
    "\035\027\031\030\030\031\045\041\026\046\053\054\033" +
    "\055\041\056\052\057\034\060\036\062\050\001\002\000" +
    "\006\047\056\053\055\001\002\000\034\025\025\026\035" +
    "\027\031\030\030\031\045\041\026\046\053\054\033\055" +
    "\041\056\052\057\034\060\036\062\050\001\002\000\062" +
    "\005\uffce\010\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015" +
    "\uffce\016\uffce\017\uffce\024\uffce\032\uffce\033\uffce\034\uffce" +
    "\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043" +
    "\uffce\047\uffce\052\uffce\053\uffce\062\uffce\001\002\000\036" +
    "\005\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015" +
    "\uffe2\016\uffe2\017\uffe2\024\uffe2\047\uffe2\052\060\053\uffe2" +
    "\062\uffe2\001\002\000\034\025\025\026\035\027\031\030" +
    "\030\031\045\041\026\046\053\054\033\055\041\056\052" +
    "\057\034\060\036\062\050\001\002\000\036\005\uffe0\010" +
    "\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0" +
    "\017\uffe0\024\uffe0\047\uffe0\052\uffe0\053\uffe0\062\uffe0\001" +
    "\002\000\032\025\025\026\035\027\031\030\030\031\045" +
    "\041\026\046\053\055\041\056\052\057\034\060\036\062" +
    "\050\001\002\000\010\040\064\041\065\047\066\001\002" +
    "\000\032\025\025\026\035\027\031\030\030\031\045\041" +
    "\026\046\053\055\041\056\052\057\034\060\036\062\050" +
    "\001\002\000\032\025\025\026\035\027\031\030\030\031" +
    "\045\041\026\046\053\055\041\056\052\057\034\060\036" +
    "\062\050\001\002\000\062\005\uffe4\010\uffe4\011\uffe4\012" +
    "\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\024\uffe4" +
    "\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040" +
    "\uffe4\041\uffe4\042\uffe4\043\uffe4\047\uffe4\052\uffe4\053\uffe4" +
    "\062\uffe4\001\002\000\062\005\uffd4\010\uffd4\011\uffd4\012" +
    "\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\024\uffd4" +
    "\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040" +
    "\uffd4\041\uffd4\042\070\043\071\047\uffd4\052\uffd4\053\uffd4" +
    "\062\uffd4\001\002\000\032\025\025\026\035\027\031\030" +
    "\030\031\045\041\026\046\053\055\041\056\052\057\034" +
    "\060\036\062\050\001\002\000\032\025\025\026\035\027" +
    "\031\030\030\031\045\041\026\046\053\055\041\056\052" +
    "\057\034\060\036\062\050\001\002\000\062\005\uffd1\010" +
    "\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1" +
    "\017\uffd1\024\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036" +
    "\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\047\uffd1" +
    "\052\uffd1\053\uffd1\062\uffd1\001\002\000\062\005\uffd2\010" +
    "\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2" +
    "\017\uffd2\024\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036" +
    "\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\047\uffd2" +
    "\052\uffd2\053\uffd2\062\uffd2\001\002\000\062\005\uffd5\010" +
    "\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5" +
    "\017\uffd5\024\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036" +
    "\uffd5\037\uffd5\040\uffd5\041\uffd5\042\070\043\071\047\uffd5" +
    "\052\uffd5\053\uffd5\062\uffd5\001\002\000\004\047\076\001" +
    "\002\000\062\005\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0" +
    "\014\uffc0\015\uffc0\016\uffc0\017\uffc0\024\uffc0\032\uffc0\033" +
    "\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0" +
    "\042\uffc0\043\uffc0\047\uffc0\052\uffc0\053\uffc0\062\uffc0\001" +
    "\002\000\036\005\uffde\010\uffde\011\uffde\012\uffde\013\uffde" +
    "\014\uffde\015\uffde\016\uffde\017\uffde\024\uffde\047\uffde\052" +
    "\uffde\053\uffde\062\uffde\001\002\000\032\025\025\026\035" +
    "\027\031\030\030\031\045\041\026\046\053\055\041\056" +
    "\052\057\034\060\036\062\050\001\002\000\032\025\025" +
    "\026\035\027\031\030\030\031\045\041\026\046\053\055" +
    "\041\056\052\057\034\060\036\062\050\001\002\000\032" +
    "\025\025\026\035\027\031\030\030\031\045\041\026\046" +
    "\053\055\041\056\052\057\034\060\036\062\050\001\002" +
    "\000\032\025\025\026\035\027\031\030\030\031\045\041" +
    "\026\046\053\055\041\056\052\057\034\060\036\062\050" +
    "\001\002\000\032\025\025\026\035\027\031\030\030\031" +
    "\045\041\026\046\053\055\041\056\052\057\034\060\036" +
    "\062\050\001\002\000\032\025\025\026\035\027\031\030" +
    "\030\031\045\041\026\046\053\055\041\056\052\057\034" +
    "\060\036\062\050\001\002\000\042\005\uffd7\010\uffd7\011" +
    "\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7" +
    "\024\uffd7\040\064\041\065\047\uffd7\052\uffd7\053\uffd7\062" +
    "\uffd7\001\002\000\042\005\uffd9\010\uffd9\011\uffd9\012\uffd9" +
    "\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\024\uffd9\040" +
    "\064\041\065\047\uffd9\052\uffd9\053\uffd9\062\uffd9\001\002" +
    "\000\042\005\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014" +
    "\uffd8\015\uffd8\016\uffd8\017\uffd8\024\uffd8\040\064\041\065" +
    "\047\uffd8\052\uffd8\053\uffd8\062\uffd8\001\002\000\042\005" +
    "\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc" +
    "\016\uffdc\017\uffdc\024\uffdc\040\064\041\065\047\uffdc\052" +
    "\uffdc\053\uffdc\062\uffdc\001\002\000\042\005\uffda\010\uffda" +
    "\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017" +
    "\uffda\024\uffda\040\064\041\065\047\uffda\052\uffda\053\uffda" +
    "\062\uffda\001\002\000\042\005\uffdb\010\uffdb\011\uffdb\012" +
    "\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\024\uffdb" +
    "\040\064\041\065\047\uffdb\052\uffdb\053\uffdb\062\uffdb\001" +
    "\002\000\004\047\115\001\002\000\062\005\uffbf\010\uffbf" +
    "\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\017" +
    "\uffbf\024\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf" +
    "\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\047\uffbf\052" +
    "\uffbf\053\uffbf\062\uffbf\001\002\000\004\047\117\001\002" +
    "\000\062\005\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014" +
    "\uffbe\015\uffbe\016\uffbe\017\uffbe\024\uffbe\032\uffbe\033\uffbe" +
    "\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042" +
    "\uffbe\043\uffbe\047\uffbe\052\uffbe\053\uffbe\062\uffbe\001\002" +
    "\000\062\005\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014" +
    "\uffcf\015\uffcf\016\uffcf\017\uffcf\024\uffcf\032\uffcf\033\uffcf" +
    "\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042" +
    "\uffcf\043\uffcf\047\uffcf\052\uffcf\053\uffcf\062\uffcf\001\002" +
    "\000\004\047\122\001\002\000\062\005\uffc1\010\uffc1\011" +
    "\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1" +
    "\024\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037" +
    "\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\047\uffc1\052\uffc1" +
    "\053\uffc1\062\uffc1\001\002\000\004\002\ufff6\001\002\000" +
    "\020\010\016\011\ufff2\012\126\013\127\014\014\024\012" +
    "\062\023\001\002\000\020\010\ufff0\011\ufff0\012\ufff0\013" +
    "\ufff0\014\ufff0\024\ufff0\062\ufff0\001\002\000\020\010\uffef" +
    "\011\uffef\012\uffef\013\uffef\014\uffef\024\uffef\062\uffef\001" +
    "\002\000\020\010\uffee\011\uffee\012\uffee\013\uffee\014\uffee" +
    "\024\uffee\062\uffee\001\002\000\004\011\131\001\002\000" +
    "\034\025\025\026\035\027\031\030\030\031\045\041\026" +
    "\046\053\054\033\055\041\056\052\057\034\060\036\062" +
    "\050\001\002\000\030\005\uffe9\010\uffe9\011\uffe9\012\uffe9" +
    "\013\uffe9\014\uffe9\016\uffe9\017\uffe9\024\uffe9\053\055\062" +
    "\uffe9\001\002\000\004\011\ufff1\001\002\000\006\015\135" +
    "\053\055\001\002\000\012\010\016\014\014\024\012\062" +
    "\023\001\002\000\006\016\137\017\140\001\002\000\012" +
    "\010\016\014\014\024\012\062\023\001\002\000\026\005" +
    "\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\016\uffe7" +
    "\017\uffe7\024\uffe7\062\uffe7\001\002\000\004\017\142\001" +
    "\002\000\026\005\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8" +
    "\014\uffe8\016\uffe8\017\uffe8\024\uffe8\062\uffe8\001\002\000" +
    "\010\005\ufff3\016\ufff3\017\ufff3\001\002\000\036\025\025" +
    "\026\035\027\031\030\030\031\045\041\026\046\053\054" +
    "\033\055\041\056\052\057\034\060\036\061\145\062\050" +
    "\001\002\000\004\047\150\001\002\000\006\047\147\053" +
    "\055\001\002\000\026\005\uffe6\010\uffe6\011\uffe6\012\uffe6" +
    "\013\uffe6\014\uffe6\016\uffe6\017\uffe6\024\uffe6\062\uffe6\001" +
    "\002\000\026\005\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5" +
    "\014\uffe5\016\uffe5\017\uffe5\024\uffe5\062\uffe5\001\002\000" +
    "\004\050\uffc2\001\002\000\014\007\ufffc\020\153\021\154" +
    "\022\156\023\151\001\002\000\004\050\uffc3\001\002\000" +
    "\004\050\uffc4\001\002\000\004\007\166\001\002\000\004" +
    "\050\uffc5\001\002\000\004\050\160\001\002\000\004\062" +
    "\162\001\002\000\016\007\ufff8\020\ufff8\021\ufff8\022\ufff8" +
    "\023\ufff8\051\164\001\002\000\016\007\ufff7\020\ufff7\021" +
    "\ufff7\022\ufff7\023\ufff7\051\ufff7\001\002\000\014\007\ufffa" +
    "\020\ufffa\021\ufffa\022\ufffa\023\ufffa\001\002\000\004\062" +
    "\162\001\002\000\014\007\ufff9\020\ufff9\021\ufff9\022\ufff9" +
    "\023\ufff9\001\002\000\006\002\ufffe\004\ufffe\001\002\000" +
    "\004\007\ufffb\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\166\000\010\002\003\003\005\004\006\001\001\000" +
    "\002\001\001\000\010\005\154\006\151\010\156\001\001" +
    "\000\002\001\001\000\004\012\007\001\001\000\002\001" +
    "\001\000\016\013\020\014\012\017\021\020\017\021\014" +
    "\022\016\001\001\000\002\001\001\000\016\013\142\014" +
    "\012\017\021\020\017\021\014\022\016\001\001\000\026" +
    "\023\133\024\036\025\037\026\046\027\031\030\042\031" +
    "\041\032\045\033\050\034\026\001\001\000\002\001\001" +
    "\000\020\014\124\015\127\016\123\017\021\020\017\021" +
    "\014\022\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\023\043\024\036\025\037\026\046\027\031\030\042" +
    "\031\041\032\045\033\050\034\026\001\001\000\002\001" +
    "\001\000\012\031\117\032\045\033\050\034\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\025\076\026\046\027\031\030\042" +
    "\031\041\032\045\033\050\034\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\023\053\024\036\025\037" +
    "\026\046\027\031\030\042\031\041\032\045\033\050\034" +
    "\026\001\001\000\002\001\001\000\024\024\056\025\037" +
    "\026\046\027\031\030\042\031\041\032\045\033\050\034" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\025\060\026\046\027\031\030\042\031\041\032\045\033" +
    "\050\034\026\001\001\000\002\001\001\000\016\027\062" +
    "\030\042\031\041\032\045\033\050\034\026\001\001\000" +
    "\002\001\001\000\014\030\073\031\041\032\045\033\050" +
    "\034\026\001\001\000\014\030\066\031\041\032\045\033" +
    "\050\034\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\031\072\032\045\033\050\034\026\001\001\000" +
    "\012\031\071\032\045\033\050\034\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\027\112" +
    "\030\042\031\041\032\045\033\050\034\026\001\001\000" +
    "\016\027\111\030\042\031\041\032\045\033\050\034\026" +
    "\001\001\000\016\027\110\030\042\031\041\032\045\033" +
    "\050\034\026\001\001\000\016\027\107\030\042\031\041" +
    "\032\045\033\050\034\026\001\001\000\016\027\106\030" +
    "\042\031\041\032\045\033\050\034\026\001\001\000\016" +
    "\027\105\030\042\031\041\032\045\033\050\034\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\014\124\015\132\016\123" +
    "\017\021\020\017\021\014\022\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\023\131\024\036\025\037\026\046\027\031\030" +
    "\042\031\041\032\045\033\050\034\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\013" +
    "\135\014\012\017\021\020\017\021\014\022\016\001\001" +
    "\000\002\001\001\000\016\013\140\014\012\017\021\020" +
    "\017\021\014\022\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\023" +
    "\145\024\036\025\037\026\046\027\031\030\042\031\041" +
    "\032\045\033\050\034\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\166\006\151\010\156\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\162\011\160\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\164\011\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    static GeneracionCodigo gc;
    static Programa program;
    static SentenciaUnless sentenciaUnless;
    static SentenciaRepeat sentenciaRepeat;
    static ConstanteString cte_string;

    public void syntax_error(Symbol s){
        action_obj.output.add("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
        +s.value+"' . Simbolo n° "+s.sym+ " no reconocido." );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        action_obj.output.add("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
        +s.value+"' . Simbolo n° "+s.sym+ " no reconocido." );
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {


    TablaSimbolos table = new TablaSimbolos();
    List<String> output = new ArrayList<>();

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= main EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		GeneracionCodigo start_val = (GeneracionCodigo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // main ::= programa 
            {
              GeneracionCodigo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Programa p = (Programa)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		;
                gc = new GeneracionCodigo (program);
                RESULT = gc;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= seccion_declaraciones seccion_programa 
            {
              Programa RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Declaracion> sd = (List<Declaracion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int spleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int spright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Sentencia> sp = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
       		 output.add("REGLA 1.1: programa -> seccion_declaraciones seccion_programa");
     		    program = new Programa (sd,sp);  
                    RESULT = program;
    	        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // seccion_declaraciones ::= PR_DECLARE_SECTION lista_declaraciones PR_ENDDECLARE_SECTION 
            {
              List<Declaracion> RESULT =null;
		int ldsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ldsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Declaracion> lds = (List<Declaracion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                   		 output.add("REGLA 2.1: seccion_declaraciones -> DECLARE.SECTION lista_declaraciones ENDDECLARE.SECTION");
                   		 output.add(String.format("REGLA 2.1: seccion_declaraciones -> DECLARE.SECTION %s ENDDECLARE.SECTION%n", lds));
                   		 RESULT = lds;
           		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seccion_declaraciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // seccion_declaraciones ::= 
            {
              List<Declaracion> RESULT =null;
		
      			        output.add("REGLA 2.2: No hay variables declaradas\n");
      			 	RESULT = null;
   			 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seccion_declaraciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista_declaraciones ::= tipo_declaracion 
            {
              List<Declaracion> RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Declaracion td = (Declaracion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   		 output.add("REGLA 3.1: lista_declaraciones -> tipo_declaracion");
                   		 output.add(String.format("REGLA 3.1: lista_declaraciones -> %s%n", td));
                   		 RESULT = new ArrayList();
                                 RESULT.add(td);
           		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_declaraciones ::= tipo_declaracion lista_declaraciones 
            {
              List<Declaracion> RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Declaracion td = (Declaracion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ldsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ldsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Declaracion> lds = (List<Declaracion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   		 output.add("REGLA 3.2: lista_declaraciones -> lista_declaraciones tipo_declaracion");
                   		 output.add(String.format("REGLA 3.2: lista_declaraciones -> %s %s%n", lds, td));
                   		 lds.add(0,td);
                                 RESULT = lds;
           		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tipo_declaracion ::= tipo_de_variable DOS_PUNTOS lista_de_variables 
            {
              Declaracion RESULT =null;
		int tdvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tdvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TipoDato tdv = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<String> lv = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
  			  output.add("REGLA 4.1: tipo_declaracion -> tipo_de_variable : lista_de_variables");
  			  output.add(String.format("REGLA 3.3: tipo_declaracion -> %s : %s%n", tdv, lv));
  			  RESULT = new Declaracion(tdv,lv);
  			  this.table.add_symbols(tdv.getOperador().toString(),lv);
  		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lista_de_variables ::= variable COMA lista_de_variables 
            {
              List<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Identificador v = (Identificador)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<String> lv = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
              			  output.add("REGLA 5.2: lista_de_variables ->  variable COMA lista_de_variables");
              			  output.add(String.format("REGLA 4.1: lista_de_variables -> %s, %s%n", lv, v));
                                  output.add(String.format ("REGLA 4.1: lista_de_variables -> %s%n", c));
              			  lv.add(0,v.getNombre());
                                  RESULT = lv;
          	        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_de_variables",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // lista_de_variables ::= variable 
            {
              List<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Identificador v = (Identificador)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
              			  output.add("REGLA 5.1: lista_de_variables -> variable");
              			  output.add(String.format("REGLA 4.1: lista_de_variables -> %s%n", v));
                                  RESULT = new ArrayList();
                                  RESULT.add(0,v.getNombre());
                                  
          	        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_de_variables",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // variable ::= IDENTIFICADOR 
            {
              Identificador RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Identificador id = (Identificador)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
             output.add(String.format("REGLA 6.0: variable -> %s%n", id));
     	     RESULT = id;
     	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // seccion_programa ::= PR_PROGRAM_SECTION bloque_sentencias PR_ENDPROGRAM_SECTION 
            {
              List<Sentencia> RESULT =null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Sentencia> bs = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
     	     		 output.add("REGLA 7.1: sección_programa ->  PROGRAM.SECTION sentencias ENDPROGRAM.SECTION\n");
           		 RESULT = bs;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seccion_programa",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // seccion_programa ::= 
            {
              List<Sentencia> RESULT =null;
		
           		 output.add("REGLA 7.2: No hay sección de programa declarado");
           		 RESULT = null;
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seccion_programa",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // bloque_sentencias ::= sentencia 
            {
              List<Sentencia> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          			  output.add("REGLA 8.1: bloque_sentencias -> sentencia");
          			  output.add(String.format("REGLA 7.1: bloque_sentencias -> %s%n", s));
          			  RESULT = new ArrayList();
                                  RESULT.add(s);
      			  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_sentencias",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // bloque_sentencias ::= sentencia bloque_sentencias 
            {
              List<Sentencia> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Sentencia> bs = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          			  output.add("REGLA 8.2: bloque_sentencias -> sentencia bloque_sentencias");
          			  bs.add(0,s);
                                  RESULT = bs;
      			  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_sentencias",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // bloque_sentencias_repeat ::= instruccion_repeat 
            {
              List<Sentencia> RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia is = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          			  output.add("REGLA 9.1: bloque_sentencias_repeat -> instruccion_repeat");
          			  output.add("REGLA 9.1: bloque_sentencias_repeat ->" + is);
                                  RESULT = new ArrayList();
                                  RESULT.add(is);
      			  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_sentencias_repeat",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // bloque_sentencias_repeat ::= instruccion_repeat bloque_sentencias_repeat 
            {
              List<Sentencia> RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia is = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bsrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bsrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Sentencia> bsr = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          			  output.add("REGLA 9.2: bloque_sentencias -> instruccion_repeat bloque_sentencias ");
          			  bsr.add(0,is);
                                  RESULT = bsr;
      			  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_sentencias_repeat",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion_repeat ::= sentencia 
            {
              Sentencia RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
       		 output.add("REGLA 8.25: instruccion_repeat -> sentencia");
       		 output.add(String.format("REGLA 10.1: instruccion_repeat-> %s%n",s));
       		 RESULT = s;
   	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion_repeat",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion_repeat ::= PR_BREAK 
            {
              Sentencia RESULT =null;
		
       		 output.add("REGLA 8.3: sentencia -> PR_BREAK");
       		 RESULT = new SentenciaBreak(TipoPR.PR_BREAK);
                 
   	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion_repeat",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion_repeat ::= PR_CONTINUE 
            {
              Sentencia RESULT =null;
		
       		 output.add("REGLA 8.1: sentencia -> PR_CONTINUE");
       		 RESULT = new SentenciaContinue(TipoPR.PR_CONTINUE);
   	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion_repeat",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia ::= sentenciaREPEAT 
            {
              Sentencia RESULT =null;
		int srleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int srright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia sr = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           		 output.add("REGLA 11.1: sentencia -> sentenciaREPEAT");
           		 output.add(String.format("REGLA 11.1: sentencia->%s%n",sr));
           		 RESULT = sr;
   		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia ::= sentenciaUNLESS 
            {
              Sentencia RESULT =null;
		int suleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int suright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia su = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      			  output.add("REGLA 11.2: sentencia -> sentenciaUNLESS");
      			  output.add(String.format("REGLA 11.2: sentencia->UNLESS %s%n",su));
           		 RESULT = su;
   		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia ::= sentenciaSHOW 
            {
              Sentencia RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia ss = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      			  output.add("REGLA 11.3: sentencia -> sentenciaSHOW");
      			  output.add(String.format("REGLA 11.3: sentencia->%s%n",ss));
           		 RESULT = ss;
  		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencia ::= asignacion 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Asignacion a = (Asignacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      			  output.add("REGLA 11.4: sentencia -> asignación");
  	     		 output.add(String.format("REGLA 11.4: sentencia-> %s%n",a));
      			  RESULT = a;
 		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentenciaREPEAT ::= PR_REPEAT bloque_sentencias_repeat PR_UNTIL expresion_logica 
            {
              Sentencia RESULT =null;
		int bsrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bsrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Sentencia> bsr = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int explogleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int explogright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpresionLogica explog = (ExpresionLogica)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          		 output.add("REGLA 12.1: sentenciaREPEAT -> PR_REPEAT bloque_sentencias PR_UNTIL expresion_logica");
           		 output.add(String.format("REGLA 12.1: sentenciaREPEAT -> REPEAT %s UNTIL %s",bsr,explog));
           		 sentenciaRepeat = new SentenciaRepeat(bsr,explog);
                         RESULT = sentenciaRepeat;
     	            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaREPEAT",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentenciaUNLESS ::= PR_UNLESS expresion_logica PR_THEN bloque_sentencias PR_ELSE bloque_sentencias PR_END 
            {
              Sentencia RESULT =null;
		int explogleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int explogright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ExpresionLogica explog = (ExpresionLogica)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Sentencia> bs1 = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bs2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bs2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Sentencia> bs2 = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
          			  output.add("REGLA 13.1: sentenciaUNLESS -> PR_UNLESS expresion_logica PR_THEN bloque_sentencias PR_ELSE bloque_sentencias PR_END");
          			  output.add(String.format("REGLA 13.1: sentenciaUNLESS -> UNLESS %s THEN %s ELSE %s END %n",explog,bs1,bs2));
          			  sentenciaUnless = new SentenciaUnless(explog,bs1,bs2);
                                  RESULT = sentenciaUnless;
     			  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaUNLESS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentenciaUNLESS ::= PR_UNLESS expresion_logica PR_THEN bloque_sentencias PR_END 
            {
              Sentencia RESULT =null;
		int explogleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int explogright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ExpresionLogica explog = (ExpresionLogica)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Sentencia> bs1 = (List<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
          			  output.add("REGLA 13.2: sentenciaUNLESS -> PR_UNLESS expresion_logica PR_THEN bloque_sentencias PR_END");
          			  output.add(String.format("REGLA 13.2: sentenciaUNLESS -> UNLESS %s THEN %s END %n",explog,bs1));
          			  sentenciaUnless = new SentenciaUnless(explog,bs1);
                                  RESULT = sentenciaUnless;
     			  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaUNLESS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentenciaSHOW ::= PR_SHOW P_ABRE expresion_logica P_CIERRA 
            {
              Sentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpresionLogica e = (ExpresionLogica)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
          			  output.add("REGLA 14.1: sentenciaSHOW -> PR_SHOW P_ABRE expresion_general P_CIERRA");
          			  output.add(String.format("REGLA 14.1: sentenciaSHOW -> SHOW(%s)%n",e));
          			  RESULT = new SentenciaShow(e);

    	            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSHOW",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentenciaSHOW ::= PR_SHOW P_ABRE STRING_LITERAL P_CIERRA 
            {
              Sentencia RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
               		        output.add("REGLA 14.2: sentenciaSHOW -> PR_SHOW P_ABRE STRING_LITERAL P_CIERRA");
               		        output.add(String.format("REGLA 14.2: sentenciaSHOW -> SHOW(%s)%n",sl));
                                cte_string = new ConstanteString(sl);
               		        RESULT = new SentenciaShow(cte_string); 
               		        this.table.add_string_const(sl.toString());
           		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSHOW",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // fibonacci ::= PR_FIBONACCI P_ABRE expresion P_CIERRA 
            {
              ExpresionLogica RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpresionLogica e = (ExpresionLogica)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
          			  output.add("REGLA 15.1: fibonacci -> PR_FIBONACCI P_ABRE expresion P_CIERRA");
          			  output.add(String.format("REGLA 12: fibonacci -> Fibonacci(%s)%n",e));
          			  RESULT = new Fibonacci(e);
        			  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fibonacci",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // asignacion ::= IDENTIFICADOR ASIGNACION expresion_logica 
            {
              Asignacion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Identificador id = (Identificador)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpresionLogica e = (ExpresionLogica)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      			  output.add("REGLA 16.1: asignacion -> IDENTIFICADOR ASIGNACION expresion_general");
      			  output.add(String.format("REGLA 16.1: asignacion -> %s := %s%n", id, e));
      			  RESULT = new Asignacion(id,e);
   		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresion_logica ::= expresion_logica OR expresion_AND 
            {
              ExpresionLogica RESULT =null;
		int explogleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int explogright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpresionLogica explog = (ExpresionLogica)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expandleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expandright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpresionLogica expand = (ExpresionLogica)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           		 output.add("REGLA 17.1: expresion_logica -> expresion_logica OR expresion_AND");
           		 output.add(String.format("REGLA 17.1: expresion_logica -> %s or %s%n", explog, expand));
     	     		 RESULT = new ExpresionOR(explog,expand);
       		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion_logica ::= expresion_AND 
            {
              ExpresionLogica RESULT =null;
		int expandleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expandright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpresionLogica expand = (ExpresionLogica)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
         	        output.add("REGLA 17.2: expresion_logica -> expresion_AND");
         	        output.add(String.format("REGLA 17.2: expresion_logica -> %s%n",expand));
     		        RESULT = expand;
       		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion_AND ::= expresion_AND AND expresion_simple 
            {
              ExpresionLogica RESULT =null;
		int expandleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expandright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpresionLogica expand = (ExpresionLogica)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expsimleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expsimright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpresionLogica expsim = (ExpresionLogica)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          			  output.add("REGLA 18.1: expresion_AND -> expresion_AND AND expresion_simple");
          			  output.add(String.format("REGLA 18.1: expresion_AND -> %s and %s%n", expand, expsim));
          	     		 RESULT = new ExpresionAND (expand,expsim);
       		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_AND",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion_AND ::= expresion_simple 
            {
              ExpresionLogica RESULT =null;
		int expsimleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expsimright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpresionLogica expsim = (ExpresionLogica)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          	     		 output.add("REGLA 18.2: expresion_AND -> expresion_simple");
               		         output.add(String.format("REGLA 18.2: expresion_AND -> %s%n",expsim));
               		 RESULT = expsim;
     			  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_AND",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion_simple ::= NOT expresion_simple 
            {
              ExpresionLogica RESULT =null;
		int expsimleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expsimright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpresionLogica expsim = (ExpresionLogica)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
             			  output.add("REGLA 19.1: expresion_simple -> NOT expresion_simple");
             			  output.add(String.format("REGLA 19.1: expresion_simple -> not %s%n",expsim));
             			  RESULT =  new ExpresionNOT(expsim);
         		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_simple",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion_simple ::= comparacion 
            {
              ExpresionLogica RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int compright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpresionLogica comp = (ExpresionLogica)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            			  output.add("REGLA 19.2: expresion_simple -> comparacion");
            			  output.add(String.format("REGLA 19.2: expresion_simple -> %s%n",comp));
            			  RESULT = comp;
         		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_simple",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // comparacion ::= expresion IGUALDAD expresion 
            {
              ExpresionLogica RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpresionLogica e1 = (ExpresionLogica)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpresionLogica e2 = (ExpresionLogica)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    			  output.add("REGLA 20.1: comparacion -> expresion IGUALDAD expresion");
    			  output.add(String.format("REGLA 20.1: expresion -> %s == %s%n", e1, e2));
    			  RESULT = new Igualdad(e1,e2);;
 			  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparacion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comparacion ::= expresion DISTINTO expresion 
            {
              ExpresionLogica RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpresionLogica e1 = (ExpresionLogica)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpresionLogica e2 = (ExpresionLogica)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
       			  output.add("REGLA 20.2: comparacion -> expresion DISTINTO expresion");
       			  output.add(String.format("REGLA 20.2: expresion -> %s != %s%n", e1, e2));
       			  RESULT = new Distinto(e1,e2);;
  			  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparacion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comparacion ::= expresion MENOR expresion 
            {
              ExpresionLogica RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpresionLogica e1 = (ExpresionLogica)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpresionLogica e2 = (ExpresionLogica)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      			  output.add("REGLA 20.3: comparacion -> expresion MENOR expresion");
      			  output.add(String.format("REGLA 20.3: expresion -> %s < %s%n", e1, e2));
      			  RESULT = new Menor(e1,e2);;
 			  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparacion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // comparacion ::= expresion MAYOR expresion 
            {
              ExpresionLogica RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpresionLogica e1 = (ExpresionLogica)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpresionLogica e2 = (ExpresionLogica)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      			  output.add("REGLA 20.4: comparacion -> expresion MAYOR expresion");
       			  output.add(String.format("REGLA 20.4: expresion -> %s > %s%n", e1, e2));
      			  RESULT = new Mayor(e1,e2);
   		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparacion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // comparacion ::= expresion MENOR_IGUAL expresion 
            {
              ExpresionLogica RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpresionLogica e1 = (ExpresionLogica)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpresionLogica e2 = (ExpresionLogica)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      			  output.add("REGLA 20.5: comparacion -> expresion MENOR_IGUAL expresion");
      			  output.add(String.format("REGLA 20.5 : expresion -> %s <= %s%n", e1, e2));
      			  RESULT = new MenorIgual(e1,e2);
   		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparacion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // comparacion ::= expresion MAYOR_IGUAL expresion 
            {
              ExpresionLogica RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpresionLogica e1 = (ExpresionLogica)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpresionLogica e2 = (ExpresionLogica)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      			  output.add("REGLA 20.6: comparacion -> expresion MAYOR_IGUAL expresion");
      			  output.add(String.format("REGLA 20.6: expresion -> %s >= %s%n", e1, e2));
      			  RESULT =  new MayorIgual(e1,e2);
 			  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparacion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // comparacion ::= expresion 
            {
              ExpresionLogica RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpresionLogica e = (ExpresionLogica)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
 			 	output.add("REGLA 20.7: comparacion -> expresion");
             	                output.add(String.format("REGLA 20.7: expresion -> %s%n", e));
             	                RESULT = e;
 			  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparacion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion ::= expresion MAS termino 
            {
              ExpresionLogica RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpresionLogica e = (ExpresionLogica)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpresionLogica t = (ExpresionLogica)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        		 output.add("REGLA 21.1: expresion -> expresion MAS termino");
        		 output.add(String.format("REGLA 21.1: expresion -> %s + %s%n", e, t));
        		 RESULT = new Suma(e,t);
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion ::= expresion MENOS termino 
            {
              ExpresionLogica RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpresionLogica e = (ExpresionLogica)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpresionLogica t = (ExpresionLogica)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        		 output.add("REGLA 21.2: expresion -> expresion MENOS termino");
        		 output.add(String.format("REGLA 21.2: expr -> %s - %s%n", e, t));
        		 RESULT = new Resta(e,t);
   	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion ::= termino 
            {
              ExpresionLogica RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpresionLogica t = (ExpresionLogica)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
       		 output.add("REGLA 21.3: expresion -> termino");
       		 output.add(String.format("REGLA 21.3: expresion -> %s%n", t));
       		 RESULT = t;
   	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // termino ::= termino MULT factor 
            {
              ExpresionLogica RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpresionLogica t = (ExpresionLogica)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpresionLogica f = (ExpresionLogica)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           		 output.add("REGLA 22.1: termino -> termino MULT factor");
           		 output.add(String.format("REGLA 22.1: termino -> %s * %s%n", t, f));
           		 RESULT = new Multiplicacion(t,f);
       		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termino",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // termino ::= termino DIV factor 
            {
              ExpresionLogica RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpresionLogica t = (ExpresionLogica)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpresionLogica f = (ExpresionLogica)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           		 output.add("REGLA 22.2: termino -> termino DIV factor");
     	      		 output.add(String.format("REGLA 22.2: termino -> %s / %s%n", t, f));
     	                 RESULT = new Division(t,f);
  	        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termino",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // termino ::= factor 
            {
              ExpresionLogica RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpresionLogica f = (ExpresionLogica)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    			 output.add("REGLA 22.3: termino -> factor");
     	     		 output.add(String.format("REGLA 22.3: termino -> %s%n", f));
    			 RESULT = f;
  	        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termino",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // factor ::= MENOS factor 
            {
              ExpresionLogica RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpresionLogica f = (ExpresionLogica)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    			 output.add("REGLA 23.1: factor -> MENOS factor_sin_signo");
     	     		 output.add(String.format("REGLA 23.1: factor -> - %s%n", f));
     	     		 RESULT = new MenosUnario(f);
          		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // factor ::= P_ABRE expresion_logica P_CIERRA 
            {
              ExpresionLogica RESULT =null;
		int expsimleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expsimright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpresionLogica expsim = (ExpresionLogica)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                         output.add("REGLA 23.2: expresion_logica -> P_ABRE expresion_logica P_ABRE");
                         output.add(String.format("REGLA 23.2: expresion_logica -> %s%n",expsim));
                         RESULT = expsim;
       	    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // factor ::= factor_sin_signo 
            {
              ExpresionLogica RESULT =null;
		int fssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpresionLogica fss = (ExpresionLogica)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           		 output.add("REGLA 23.3: factor -> factor_sin_signo");
           		 output.add(String.format("REGLA 20.2: factor ->  %s%n", fss));
           		 RESULT = fss;
  	    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // factor ::= fibonacci 
            {
              ExpresionLogica RESULT =null;
		int sfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpresionLogica sf = (ExpresionLogica)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           		 output.add("REGLA 23.4: factor -> sentenciaFIBONACCI");
           		 output.add(String.format("REGLA 20.4: factor-> %s",sf));
           		 RESULT = sf;
       	     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // factor_sin_signo ::= IDENTIFICADOR 
            {
              ExpresionLogica RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Identificador id = (Identificador)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           		   output.add("REGLA 24.1: factor_sin_signo -> IDENTIFICADOR");
           		   output.add(String.format("REGLA 21.1: factor_sin_signo -> %s%n", id));
           		   RESULT = id;
          		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor_sin_signo",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // factor_sin_signo ::= ENTERO 
            {
              ExpresionLogica RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           		    output.add("REGLA 24.2: factor_sin_signo -> ENTERO");
           		    output.add(String.format("REGLA 21.2: factor_sin_signo -> %s%n", ent));
           		    RESULT = new ConstanteEntera(ent);
          		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor_sin_signo",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // factor_sin_signo ::= FLOAT 
            {
              ExpresionLogica RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object fl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           		   output.add("REGLA 24.3: factor_sin_signo -> FLOAT");
           		   output.add(String.format("REGLA 21.3: factor_sin_signo -> %s%n", fl));
           		RESULT = new ConstanteReal(fl);
       		        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor_sin_signo",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // factor_sin_signo ::= DUPLE 
            {
              ExpresionLogica RESULT =null;
		int dpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           		    output.add("REGLA 24.4: factor_sin_signo-> DUPLA");
           		    output.add(String.format("REGLA 21.4: factor_sin_signo-> %s%n", dp));
           		    RESULT = new ConstanteDupla(dp);
              	        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor_sin_signo",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // factor_sin_signo ::= BOOLEAN 
            {
              ExpresionLogica RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object bool = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
     	         	    output.add ("REGLA 24.5: constante_booleana -> BOOLEANO");
           	            output.add( String.format("REGLA 22: constante_booleana -> %s%n", bool));
       		            RESULT = new ConstanteBooleana(bool);
  	                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor_sin_signo",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // factor_sin_signo ::= entrada 
            {
              ExpresionLogica RESULT =null;
		int enleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int enright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TipoEntrada en = (TipoEntrada)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
             		       output.add("REGLA 24.6: factor -> entrada");
             		       output.add(String.format("REGLA 20.4: factor-> %s",en));
             		     RESULT = en;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor_sin_signo",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // tipo_de_variable ::= PR_FLOAT 
            {
              TipoDato RESULT =null;
		
          	            output.add("REGLA 25.1: tipo_de_variable -> PR_FLOAT\n");
          	            RESULT = new TipoDato(TipoPR.PR_FLOAT);
      			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_de_variable",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // tipo_de_variable ::= PR_INTEGER 
            {
              TipoDato RESULT =null;
		
          	            output.add("REGLA 25.2: tipo_de_variable -> PR_INTEGER\n");
          	            RESULT = new TipoDato(TipoPR.PR_INTEGER);
      			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_de_variable",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // tipo_de_variable ::= PR_BOOLEAN 
            {
              TipoDato RESULT =null;
		
          		    output.add("REGLA 25.3: tipo_de_variable -> PR_BOOLEAN\n");
          	            RESULT = new TipoDato(TipoPR.PR_BOOLEAN);
      			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_de_variable",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // tipo_de_variable ::= PR_DUPLE 
            {
              TipoDato RESULT =null;
		
          	            output.add("REGLA 25.4: tipo_de_variable -> PR_DUPLE\n");
          	            RESULT = new TipoDato(TipoPR.PR_FLOAT);
      			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_de_variable",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // entrada ::= PR_INPUT_INT P_ABRE P_CIERRA 
            {
              TipoEntrada RESULT =null;
		
      			  output.add("REGLA 26.1: entrada -> PR_INPUT_INT P_ABRE P_CIERRA");
      			  RESULT = new TipoEntrada(TipoPR.PR_INPUT_INT);
 	    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entrada",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // entrada ::= PR_INPUT_FLOAT P_ABRE P_CIERRA 
            {
              TipoEntrada RESULT =null;
		
      			  output.add("REGLA 26.2: entrada -> PR_INPUT_INT P_ABRE P_CIERRA");
           		  RESULT = new TipoEntrada(TipoPR.PR_INPUT_FLOAT);
 	    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entrada",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // entrada ::= PR_INPUT_BOOL P_ABRE P_CIERRA 
            {
              TipoEntrada RESULT =null;
		
           		  output.add("REGLA 26.3: entrada -> PR_INPUT_INT P_ABRE P_CIERRA");
           		  RESULT = new TipoEntrada(TipoPR.PR_INPUT_BOOL);
 	    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entrada",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // entrada ::= PR_INPUT_DUPLE P_ABRE P_CIERRA 
            {
              TipoEntrada RESULT =null;
		
      			  output.add("REGLA 26.4: entrada -> PR_INPUT_INT P_ABRE P_CIERRA");
           		  RESULT = new TipoEntrada(TipoPR.PR_INPUT_DUPLE);
 	    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entrada",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
