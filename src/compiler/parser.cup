package compiler;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java.io.FileReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.Hashtable;
import compiler.Simbolo;

class Parser;

action code {:
    TablaSimbolos table = new TablaSimbolos();
    List<String> output = new ArrayList<>();
:};

parser code
{:
    public void syntax_error(Symbol s){
   	 action_obj.output.add("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
   	 +s.value+"' . Simbolo n° "+s.sym+ " no reconocido." );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
   	 action_obj.output.add("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
   	 +s.value+"' . Simbolo n° "+s.sym+ " no reconocido." );
    }
:};

terminal String PR_PROGRAM_SECTION, PR_ENDPROGRAM_SECTION, PR_DECLARE_SECTION, PR_ENDDECLARE_SECTION;
terminal String PR_REPEAT, PR_UNTIL, PR_BREAK, PR_CONTINUE, PR_UNLESS, PR_THEN, PR_ELSE, PR_END;
terminal String PR_BOOLEAN, PR_INTEGER, PR_FLOAT, PR_DUPLE;
terminal String PR_SHOW, PR_INPUT_INT, PR_INPUT_FLOAT, PR_INPUT_BOOL, PR_INPUT_DUPLE, PR_FIBONACCI;
terminal String MENOR, MAYOR, IGUALDAD, DISTINTO, MENOR_IGUAL, MAYOR_IGUAL;
terminal String MAS, MENOS, MULT, DIV, MENOS_UNARIO;
terminal String ASIGNACION, P_ABRE, P_CIERRA, COMA, DOS_PUNTOS;
terminal String AND, OR, NOT;
terminal String FLOAT, ENTERO, DUPLE, BOOLEAN, IDENTIFICADOR, STRING_LITERAL;

nonterminal String main, programa, lista_declaraciones, tipo_declaracion, lista_de_variables, tipo_de_variable, variable, seccion_declaraciones, seccion_programa;
nonterminal String bloque_sentencias, sentencia, instruccion_repeat, bloque_sentencias_repeat;
nonterminal String sentenciaREPEAT, sentenciaUNLESS, sentenciaSHOW, sentenciaFIBONACCI;
nonterminal String expresion, expresion_logica, expresion_AND, expresion_simple, comparacion, entrada;
nonterminal String asignacion, termino, factor, factor_sin_signo, constante_booleana;


precedence left MAS, MENOS;
precedence left MULT, DIV;
precedence left MENOS_UNARIO;
precedence left IGUALDAD, DISTINTO, MENOR_IGUAL, MAYOR_IGUAL, MENOR, MAYOR;
precedence left OR, AND, NOT;

start with main;

main ::=    programa:p {:
       		    output.add("REGLA 0.0: main ->  programa");
       		    RESULT = p;
       		 :};

programa ::=   seccion_declaraciones :sd seccion_programa:sp{:
                output.add("REGLA 1.1: programa -> seccion_declaraciones seccion_programa");
       		    RESULT = sd + sp;
             :};



seccion_declaraciones  ::= PR_DECLARE_SECTION lista_declaraciones:lds PR_ENDDECLARE_SECTION {:
                            output.add("REGLA 2.1: seccion_declaraciones -> DECLARE.SECTION lista_declaraciones ENDDECLARE.SECTION");
                            output.add(String.format("REGLA 2.1: seccion_declaraciones -> DECLARE.SECTION %s ENDDECLARE.SECTION%n", lds));
                            RESULT = "DECLARE.SECTION" + lds + "ENDDECLARE.SECTION";
                    :}| /* No hay variables declaradas */
                    {:
                	        output.add("REGLA 2.2: No hay variables declaradas\n");
                	        RESULT = "null";
             	    :};

lista_declaraciones ::=
                        lista_declaraciones:prev tipo_declaracion:curr {:
                            output.add("REGLA 3.1: lista_declaraciones -> lista_declaraciones tipo_declaracion");
                            output.add(String.format("REGLA 3.1: lista_declaraciones -> %s %s%n", prev, curr));
                            RESULT = prev + " " + curr;
                    :}|
                        tipo_declaracion:td {:
                            output.add("REGLA 3.2: lista_declaraciones -> tipo_declaracion");
                            output.add(String.format("REGLA 3.2: lista_declaraciones -> %s%n", td));
                            RESULT = td;
                    :};

tipo_declaracion ::=
        	tipo_de_variable:tdv DOS_PUNTOS lista_de_variables:lv {:
            	output.add("REGLA 3.3: tipo_declaracion -> tipo_de_variable : lista_de_variables");
            	output.add(String.format("REGLA 3.3: tipo_declaracion -> %s : %s%n", tdv, lv));
            	RESULT = tdv + " : " + lv;
            	this.table.add_symbols(tdv, lv);
        	:};


/* Lista de variables */
lista_de_variables ::= variable:v {:
                        	output.add("REGLA 4.1: lista_de_variables -> variable");
                        	output.add(String.format("REGLA 4.1: lista_de_variables -> %s%n", v));
                        	RESULT = v;
                    	:}
                  	| lista_de_variables:lv COMA variable:v {:
                        	output.add("REGLA 4.2: lista_de_variables -> lista_de_variables COMA variable");
                        	output.add(String.format("REGLA 4.1: lista_de_variables -> %s, %s%n", lv, v));
                        	RESULT = lv + ", " + v;
                    	:};


/* Variable */
variable ::= IDENTIFICADOR:id {:
                    output.add(String.format("REGLA 5.0: variable -> %s%n", id));
       		        RESULT = id;
   		 :};

seccion_programa::=  PR_PROGRAM_SECTION bloque_sentencias:bs PR_ENDPROGRAM_SECTION{:
       	            output.add("REGLA 6.0: sección_programa ->  PROGRAM.SECTION sentencias ENDPROGRAM.SECTION\n");
                    RESULT = "PROGRAM.SECTION" + bs + "ENDPROGRAM.SECTION";
         :}| /* No hay sección de programa declarada */{:
                    output.add("REGLA 6.0: No hay sección de programa declarado");
                    RESULT = " ";
 :};

/* Sentencias */
bloque_sentencias ::= sentencia:s {:
                    	output.add("REGLA 7.1: bloque_sentencias -> sentencia");
                    	output.add(String.format("REGLA 7.1: bloque_sentencias -> %s%n", s));
                    	RESULT = s;
                	:}
                	| bloque_sentencias:bs sentencia:s {:
                    	output.add("REGLA 7.2: bloque_sentencias -> bloque_sentencias sentencia");
                    	RESULT = bs + " " + s;
                	:};

// Bloque instrucciones para REPEAT

bloque_sentencias_repeat ::= instruccion_repeat:is {:
                    	output.add("REGLA 8.1: bloque_sentencias_repeat -> instruccion_repeat");
                    	output.add("REGLA 8.1: bloque_sentencias_repeat ->" + is);
                    	RESULT = is;
                	:}
                	| bloque_sentencias_repeat:bsr instruccion_repeat:is {:
                    	output.add("REGLA 8.2: bloque_sentencias -> bloque_sentencias instruccion_repeat");
                    	RESULT = bsr + " " + is;
                	:};

instruccion_repeat::= sentencia:s {:
                output.add("REGLA 8.25: instruccion_repeat -> sentencia");
                output.add(String.format("REGLA 8.3: instruccion_repeat-> %s%n",s));
                RESULT = s;
        :} | PR_BREAK:b {:
                output.add("REGLA 8.3: sentencia -> PR_BREAK");
                output.add(String.format("REGLA 8.3: sentencia->BREAK %s%n",b));
                RESULT = "BREAK";
        :}| PR_CONTINUE:c {:
                output.add("REGLA 8.1: sentencia -> PR_CONTINUE");
                output.add(String.format("REGLA 8.4: sentencia->CONTINUE %s%n",c));
                RESULT = "CONTINUE";
        :};


sentencia ::= sentenciaREPEAT:sr {:
                    output.add("REGLA 9.1: sentencia -> sentenciaREPEAT");
                    output.add(String.format("REGLA 9.1: sentencia->%s%n",sr));
                    RESULT = sr;
            :}|
            sentenciaUNLESS:su {:
                	output.add("REGLA 9.2: sentencia -> sentenciaUNLESS");
                	output.add(String.format("REGLA 9.2: sentencia->UNLESS %s%n",su));
                    RESULT = su;
            :}|
              sentenciaSHOW:ss {:
                	output.add("REGLA 9.3: sentencia -> sentenciaSHOW");
                	output.add(String.format("REGLA 9.3: sentencia->%s%n",ss));
                    RESULT = ss;
           :}|
         	asignacion:a {:
                	output.add("REGLA 9.5: sentencia -> asignación");
		            output.add(String.format("REGLA 9.5: sentencia-> %s%n",a));
                	RESULT = a;
           	:};


/* Sentencia REPEAT */
sentenciaREPEAT ::= PR_REPEAT bloque_sentencias_repeat:bsr PR_UNTIL expresion_logica:explog {:
                   output.add("REGLA 10.1: sentenciaREPEAT -> PR_REPEAT bloque_sentencias PR_UNTIL expresion_logica");
                    output.add(String.format("REGLA 10.1: sentenciaREPEAT -> REPEAT %s UNTIL %s",bsr,explog));
                    RESULT = "REPEAT " + bsr + "UNTIL " + explog;
               	:};

/* Sentencia UNLESS */
sentenciaUNLESS ::= PR_UNLESS expresion_logica:explog PR_THEN bloque_sentencias:bs1 PR_ELSE bloque_sentencias:bs2 PR_END {:
                    	output.add("REGLA 10.2: sentenciaUNLESS -> PR_UNLESS expresion_logica PR_THEN bloque_sentencias PR_ELSE bloque_sentencias PR_END");
                    	output.add(String.format("REGLA 10.2: sentenciaUNLESS -> UNLESS %s THEN %s ELSE %s END %n",explog,bs1,bs2));
                    	RESULT = "UNLESS " + explog + "THEN " + bs1 + "ELSE " + bs2 + "END";
               	:};

sentenciaUNLESS ::= PR_UNLESS expresion_logica:explog PR_THEN bloque_sentencias:bs1 PR_END {:
                    	output.add("REGLA: sentenciaUNLESS -> PR_UNLESS expresion_logica PR_THEN bloque_sentencias PR_END");
                    	output.add(String.format("REGLA: sentenciaUNLESS -> UNLESS %s THEN %s END %n",explog,bs1));
                    	RESULT = "UNLESS " + explog + "THEN " + bs1 + "END";
               	:};

/* Sentencia SHOW */
sentenciaSHOW ::= PR_SHOW P_ABRE expresion:e P_CIERRA{:
                    	output.add("REGLA 11.1: sentenciaSHOW -> PR_SHOW P_ABRE expresion P_CIERRA");
                    	output.add(String.format("REGLA 11.1: sentenciaSHOW -> SHOW(%s)%n",e));
                    	RESULT = "SHOW(" + e + ")";

              	:}| PR_SHOW P_ABRE STRING_LITERAL:sl P_CIERRA {:
                        output.add("REGLA 11.3: sentenciaSHOW -> PR_SHOW P_ABRE STRING_LITERAL P_CIERRA");
                        output.add(String.format("REGLA 11.3: sentenciaSHOW -> SHOW(%s)%n",sl));
                        RESULT = "SHOW(" + sl + ")";
                        this.table.add_string_const(sl);
                    :};

/* Sentencia FIBONACCI */
sentenciaFIBONACCI ::= PR_FIBONACCI P_ABRE expresion:e P_CIERRA {:
                    	output.add("REGLA 12: sentenciaFIBONACCI -> PR_FIBONACCI P_ABRE expresion P_CIERRA");
                    	output.add(String.format("REGLA 12: sentenciaFIBONACCI -> Fibonacci(%s)%n",e));
                    	RESULT = "Fibonacci"+"("+ e +")";
                  	:};


/* Asignación */
asignacion ::= IDENTIFICADOR:id ASIGNACION expresion:e {:
                	output.add("REGLA 13.1: asignacion -> IDENTIFICADOR ASIGNACION expresion");
                	output.add(String.format("REGLA 13.1: asignacion -> %s := %s%n", id, e));
                	RESULT = id + ":= " + e;
            :};

expresion_logica ::= expresion_logica:explog OR expresion_AND:expand {:
                    output.add("REGLA 14.1: expresion_logica -> expresion_logica OR expresion_AND");
                    output.add(String.format("REGLA 14.1: expresion_logica -> %s or %s%n", explog, expand));
   		            RESULT = explog + "OR" + expand;
                :}| expresion_AND:expand {:
                   	output.add("REGLA 14.2: expresion_logica -> expresion_AND");
                   	output.add(String.format("REGLA 14.2: expresion_logica -> %s%n",expand));
   	    	        RESULT = expand;
                :};

expresion_AND ::=   expresion_AND:expand AND expresion_simple:expsim {:
                    	output.add("REGLA 15.1: expresion_AND -> expresion_AND AND expresion_simple");
                    	output.add(String.format("REGLA 15.1: expresion_AND -> %s and %s%n", expand, expsim));
   	     	            RESULT = expand + "AND" + expsim;
                :}| expresion_simple:expsim {:
   	     	            output.add("REGLA 15.2: expresion_AND -> expresion_simple");
                        output.add(String.format("REGLA 15.2: expresion_AND -> %s%n",expsim));
                        RESULT = expsim;
               	:};

expresion_simple ::=NOT expresion_simple:expsim {:
                       	output.add("REGLA 16.1: expresion_simple -> NOT expresion_simple");
                       	output.add(String.format("REGLA 16.1: expresion_simple -> not %s%n",expsim));
                       	RESULT = "NOT" + expsim;
                  :}| comparacion:comp {:
                      	output.add("REGLA 16.2: expresion_simple -> comparacion");
                      	output.add(String.format("REGLA 16.2: expresion_simple -> %s%n",comp));
                      	RESULT = comp;
                  :}| constante_booleana:cb {:
                        output.add("REGLA 16.3: expresion_simple -> constante_booleana");
                        output.add(String.format("REGLA 16.3: expresion_simple -> %s",cb));
                        RESULT = cb;
                  :};

/* Comparación */
comparacion ::= expresion:e1 IGUALDAD expresion:e2 {:
              	output.add("REGLA 17.1: comparacion -> expresion IGUALDAD expresion");
              	output.add(String.format("REGLA 17.1: expresion -> %s == %s%n", e1, e2));
              	RESULT = e1 + "==" + e2;
           	:}|
           	expresion:e1 DISTINTO expresion:e2 {:
                 	output.add("REGLA 17.2: comparacion -> expresion DISTINTO expresion");
                 	output.add(String.format("REGLA 17.2: expresion -> %s != %s%n", e1, e2));
                 	RESULT = e1 + "!=" + e2;
            	:}|
           	expresion:e1 MENOR expresion:e2 {:
                	output.add("REGLA 17.3: comparacion -> expresion MENOR expresion");
                	output.add(String.format("REGLA 17.3: expresion -> %s < %s%n", e1, e2));
                	RESULT = e1 + "<" + e2;
           	:}|
           	expresion:e1 MAYOR expresion:e2 {:
                	output.add("REGLA 17.4: comparacion -> expresion MAYOR expresion");
                 	output.add(String.format("REGLA 17.4: expresion -> %s > %s%n", e1, e2));
                	RESULT = e1 + ">" + e2;
            :}|
           	expresion:e1 MENOR_IGUAL expresion:e2 {:
                	output.add("REGLA 17.5: comparacion -> expresion MENOR_IGUAL expresion");
                	output.add(String.format("REGLA 17.5 : expresion -> %s <= %s%n", e1, e2));
                	RESULT = e1 + "<=" + e2;
            :}|
           	expresion:e1 MAYOR_IGUAL expresion:e2 {:
                	output.add("REGLA 17.6: comparacion -> expresion MAYOR_IGUAL expresion");
                	output.add(String.format("REGLA 17.6: expresion -> %s >= %s%n", e1, e2));
                	RESULT = e1 + ">=" + e2;
           	:};

expresion ::= expresion:e MAS termino:t {:
                 output.add("REGLA 18.1: expresion -> expresion MAS termino");
                 output.add(String.format("REGLA 18.1: expresion -> %s + %s%n", e, t));
                 RESULT = e+" + "+t;
   	    :}|
            expresion:e MENOS termino:t {:
                 output.add("REGLA 18.2: expresion -> expresion MENOS termino");
                 output.add(String.format("REGLA 18.2: expr -> %s - %s%n", e, t));
                 RESULT = e+" - "+t;
        :}|
            termino:t {:
                output.add("REGLA 18.3: expresion -> termino");
                output.add(String.format("REGLA 18.3: expresion -> %s%n", t));
                RESULT = t;
        :};

termino ::= 	termino:t MULT factor:f {:
                    output.add("REGLA 19.1: termino -> termino MULT factor");
                    output.add(String.format("REGLA 19.1: termino -> %s * %s%n", t, f));
                    RESULT = t+" * "+f;
                :}|
            	termino:t DIV factor:f {:
                    output.add("REGLA 19.2: termino -> termino DIV factor");
   		 	        output.add(String.format("REGLA 19.2: termino -> %s / %s%n", t, f));
   		            RESULT = t+" / "+f;
            	:}|
            	factor:f {:
              	    output.add("REGLA 19.3: termino -> factor");
   		            output.add(String.format("REGLA 19.3: termino -> %s%n", f));
              	    RESULT = f;
            	:};

factor ::=  MENOS factor:f {:
              	    output.add("REGLA 20.1: factor -> MENOS factor_sin_signo");
   		            output.add(String.format("REGLA 20.1: factor -> - %s%n", f));
   		            RESULT = "-"+f;
   	            :} %prec MENOS_UNARIO
   	            |
                P_ABRE expresion:e P_CIERRA {:
                    output.add("REGLA 20.2: factor -> P_ABRE expresion P_CIERRA");
                    output.add(String.format("REGLA 20.2: factor -> (%s)%n", e));
                    RESULT = "(" + e + ")";
               :} |
                factor_sin_signo:fss {:
                    output.add("REGLA 20.2: factor -> factor_sin_signo");
                    output.add(String.format("REGLA 20.2: factor ->  %s%n", fss));
                    RESULT = fss;
        	    :} |
        	    sentenciaFIBONACCI:sf {:
                    output.add("REGLA 20.4: factor -> sentenciaFIBONACCI");
                    output.add(String.format("REGLA 20.4: factor-> %s",sf));
                    RESULT = sf;
                :}|
                entrada:en {:
                      output.add("REGLA 20.5: factor -> entrada");
                      output.add(String.format("REGLA 20.4: factor-> %s",en));
                      RESULT = en;
                  :};

factor_sin_signo ::=  IDENTIFICADOR:id {:
                    output.add("REGLA 21.1: factor_sin_signo -> IDENTIFICADOR");
                    output.add(String.format("REGLA 21.1: factor_sin_signo -> %s%n", id));
                    RESULT = id;
   	            :}|
   	            ENTERO:ent{:
                    output.add("REGLA 21.2: factor_sin_signo -> ENTERO");
                    output.add(String.format("REGLA 21.2: factor_sin_signo -> %s%n", ent));
                    RESULT = ent;
   	            :}|
   	            FLOAT:fl{:
                    output.add("REGLA 21.3: factor_sin_signo -> FLOAT");
                    output.add(String.format("REGLA 21.3: factor_sin_signo -> %s%n", fl));
                    RESULT = fl;
                :}|
                DUPLE:dp{:
                    output.add("REGLA 21.4: factor_sin_signo-> DUPLA");
                    output.add(String.format("REGLA 21.4: factor_sin_signo-> %s%n", dp));
                    RESULT = dp;
   	 :};

constante_booleana ::= BOOLEAN:bool {:
   		                output.add ("REGLA 22: constante_booleana -> BOOLEANO");
                     	output.add( String.format("REGLA 22: constante_booleana -> %s%n", bool));
   	      	            RESULT = bool;
            	:};

tipo_de_variable ::= PR_FLOAT {:
                    	output.add("REGLA 23.1: tipo_de_variable -> PR_FLOAT");
                    	RESULT = "float";
                	:}
               	    | PR_INTEGER {:
                    	output.add("REGLA 23.2: tipo_de_variable -> PR_INTEGER");
                    	RESULT = "integer";
                	:}
               	    | PR_BOOLEAN {:
                    	output.add("REGLA 23.3: tipo_de_variable -> PR_BOOLEAN");
                    	RESULT = "boolean";
                	:}
                	| PR_DUPLE {:
                    	output.add("REGLA 23.4: tipo_de_variable -> PR_DUPLE");
                    	RESULT = "duple";
                	:};

entrada ::= PR_INPUT_INT P_ABRE P_CIERRA {:
                	output.add("REGLA 24.1: entrada -> PR_INPUT_INT P_ABRE P_CIERRA");
                	RESULT = "INPUT_INT()";
           	:} |
           	PR_INPUT_FLOAT P_ABRE P_CIERRA {:
                	output.add("REGLA 24.2: entrada -> PR_INPUT_INT P_ABRE P_CIERRA");
                    RESULT = "INPUT_FLOAT()";
           	:} |
           	PR_INPUT_BOOL P_ABRE P_CIERRA {:
                    output.add("REGLA 24.3: entrada -> PR_INPUT_INT P_ABRE P_CIERRA");
                    RESULT = "INPUT_BOOL()";
           	:}|
           	PR_INPUT_DUPLE P_ABRE P_CIERRA {:
                	output.add("REGLA 24.4: entrada -> PR_INPUT_INT P_ABRE P_CIERRA");
                    RESULT = "INPUT_DUPLE()";
           	:};



